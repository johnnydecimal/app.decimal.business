/* common.scss
 *
 * Use this for commonly-named classes etc. Then just @use directly in a
 * component and there's nothing to declare there.
 */

@use "./reset.css";

@mixin dark {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}
@mixin phone-only {
  @media (max-width: 599px) {
    @content;
  }
}
@mixin tablet-portrait-up {
  @media (min-width: 600px) {
    @content;
  }
}
@mixin tablet-landscape-up {
  @media (min-width: 900px) {
    @content;
  }
}
@mixin desktop-up {
  @media (min-width: 1200px) {
    @content;
  }
}
@mixin big-desktop-up {
  @media (min-width: 1800px) {
    @content;
  }
}

/* -------------------------------- Variables ------------------------------- */
:root {
  --content-max-width: 600px;
  --content-padding: 1rem;

  --tiny: 10px;
  --small: 14px;
  --medium: 20px;
  --large: 28px;
  --xlarge: 40px;
}

/* -------------------------------- Elements -------------------------------- */

footer {
  margin-top: 100px;
}

html {
  color-scheme: light dark;
}

input {
  &#search {
    border: none;
    font-family: "Berkeley Mono", ui-monospace, "Cascadia Code",
      "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
    outline: none;
    padding: 10px;
  }
}

main {
  font-family: "Berkeley Mono", ui-monospace, "Cascadia Code", "Source Code Pro",
    Menlo, Consolas, "DejaVu Sans Mono", monospace;
  padding-top: 50px;
}

nav {
  ul {
    list-style: none;
    margin: 0;
  }
}

ol {
  list-style-position: inside;
  &.acid-list {
    list-style-type: none;
  }
}

p {
  line-height: 1.4;
  + p {
    margin-top: 0.5rem;
  }
}

/* ----------------------------- Utility classes ---------------------------- */
// Spans the page width without margin. Used for full-width effects e.g.
// background & border. No content should live at this level.
.slice-container {
  &.active-top {
    border-top: 1px solid black;
  }
  &.active-middle {
  }
  &.active-bottom {
    border-bottom: 1px solid black;
  }

  &.grey {
    background-color: #fafafa;
  }

  // The inner container is what brings us in from the edges, with padding
  // Everything absolutely everything should live in .
  .slice-inner {
    max-width: var(--content-max-width);
    margin: 0 auto;
    padding: 0 var(--content-padding);
    box-sizing: border-box;
  }
}

// The style where we have a label down the left, and the text on the right.
// Or on mobile, label above then text below.
.label-text-container {
  h2 {
    font-size: 1rem;
    line-height: 1.4; // line up with the adjacent <p>
    &.active-item {
      font-size: 1.6rem;
    }
  }

  h3 {
    padding-top: var(--large);
  }

  // Pad the internal text element so we retain the grey divider
  .text {
    padding-bottom: var(--small);
  }

  @include tablet-portrait-up {
    display: grid;
    grid-template-columns: 10ch auto;

    .label {
      padding: 5px 8px 5px 0;
      justify-self: end;
    }
    .text {
      border-left: 1.5px solid lightgrey;
      line-height: 1.4; // align baselines
      padding: 5px 0 5px 8px;
    }
  }
}

/* ------------------- Elements styled with a class or ID ------------------- */
// Explain why they're here and not in their component.

// The p here is set:html'd, so doesn't pick up styling from the component.
div.ac-label {
  div.title {
    p + p {
      margin-top: 1ch;
    }
  }
}
