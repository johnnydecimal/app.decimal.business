/* common.scss
 *
 * Use this for commonly-named classes etc. Then just @use directly in a
 * component and there's nothing to declare there.
 */
@import "normalize.css";

@mixin dark {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}
@mixin phone-only {
  @media (max-width: 599px) {
    @content;
  }
}
@mixin tablet-portrait-up {
  @media (min-width: 600px) {
    @content;
  }
}
@mixin tablet-landscape-up {
  @media (min-width: 900px) {
    @content;
  }
}
@mixin desktop-up {
  @media (min-width: 1200px) {
    @content;
  }
}
@mixin big-desktop-up {
  @media (min-width: 1800px) {
    @content;
  }
}

/* -------------------------------- Variables ------------------------------- */
:root {
  --content-max-width: 600px;
  --content-padding: 1rem;

  // Meh are these useful?
  --tiny: 5px;
  --small: 8px;
  --medium: 12px;
  --large: 16px;
  --xlarge: 20px;
  // Is this better
  --component-padding: 20px;

  --border-strong: light-dark(#111, #eee);
  --border-accent: light-dark(#11b, #99c);
  --secondary-content-bg: light-dark(#f3f3f3, #111);
}

/* -------------------------------- Elements -------------------------------- */

footer {
  border-top: 2px solid black;
}

html {
  color-scheme: light dark;
  font-family: "Berkeley Mono", ui-monospace, "Cascadia Code", "Source Code Pro",
    Menlo, Consolas, "DejaVu Sans Mono", monospace;
  line-height: 1.4;
}

// Spans the page width without margin. Used for full-width effects e.g.
// background & border. No content should live at this level.
// This blob of style only includes stuff that applies to the whole slice,
// regardless of its content.
.Slice {
  // Thicken the border below search
  &.search-border {
    border-bottom: 2px solid var(--border-strong);
  }
  // Push the system breadcrumb off search a touch b/c of the thick border
  &.system.breadcrumb > .inner-container > .label-text-grid > h2.label,
  &.system.breadcrumb > .inner-container > .label-text-grid > h2.text {
    padding-top: calc(var(--tiny) + 2px);
  }

  // Active vs. inactive highlighting
  // .active-top/-bottom do the border
  &.active-top {
    border-top: 1px solid var(--border-strong);
  }
  &.active-bottom {
    border-bottom: 1px solid var(--border-strong);
  }
  // .secondary-content-bg does the not-active bg tint
  &.secondary-content-bg {
    background-color: var(--secondary-content-bg);
  }

  // The inner container is what brings us in from the edges, with padding
  // Everything absolutely everything should live in here
  .inner-container {
    max-width: var(--content-max-width);
    margin: 0 auto;
    padding: 0 var(--content-padding);
    box-sizing: border-box;
  }

  // But now for the specific things that _do_ live inside there, define them
  // below so this doesn't get too busy.
}

// This is common for breadcrumbs at all sizes, and descriptive text on larger
@mixin layout-grid-100px-auto {
  display: grid;
  grid-template-columns: 110px auto;
  // On mobile, this takes a lot of room on the left. Reclaim a touch.
  @include phone-only {
    grid-template-columns: 60px auto;
  }
  .label {
    justify-self: end;
    padding: var(--tiny) var(--small) var(--tiny) 0;
  }
  .text {
    border-left: 1.5px solid light-dark(#ccc, #333);
    padding: var(--tiny) 0 var(--tiny) var(--small);
  }
}

// Breadcrumbs. They look mostly the same on all platforms.
// .breadcrumb {
//   .label-text-grid {
//     @include layout-grid-100px-auto;

//     // Using h2 for semantics: simplify appearance
//     h2 {
//       font-size: 1rem;
//       font-weight: normal;
//       margin: 0;
//       // Even medium words can easily cause right-spill; force a break
//       @include phone-only {
//         hyphens: auto;
//         word-break: break-word;
//       }
//     }

//     // Make the active breadcrumb stand out
//     &.active-item {
//       h2 {
//         font-size: 1.6rem;
//         font-weight: bold;
//         padding-top: 1rem;
//         @include phone-only {
//           font-size: 1.4rem;
//         }
//       }

//       // On mobile, the active item's breadcrumb doesn't need the dividing line;
//       // otherwise we have to separate it somehow from the description
//       .text {
//         @include phone-only {
//           border-left: unset;
//         }
//       }
//     }
//   }
// }

// The main body text

/* -------------------------------- NEW STUFF ------------------------------- */
/* --------------------------------- Layouts -------------------------------- */
.layout-grid-left-right {
  display: grid;
  grid-template-columns: 110px auto;
  @include phone-only {
    grid-template-columns: 60px auto;
  }
}
// Don't nest these in the declaration above! When you do that, you run in to
// specificity problems trying to use .padding-t-10px and so on. There's no
// reason for them to be nested. They work just fine.
.layout-left-item {
  justify-self: end;
  padding: var(--tiny) var(--small) var(--tiny) 0;
}
.layout-right-item {
  border-left: 1.5px solid light-dark(#ccc, #333);
  padding: var(--tiny) 0 var(--tiny) var(--small);
  &.border-none {
    border-left: none;
  }
}

/* ---------------------- Moved out of Component:global --------------------- */
// And I can't tell you why they all need the :global. I think it's a bug.
:global(#SystemBreadcrumb),
:global(#AreaBreadcrumb),
:global(#CategoryBreadcrumb) {
  h3 {
    font-size: 1rem;
    font-weight: normal;
    margin: 0;
  }
}

:global(#Header) {
  h1 {
    margin: 0;
    padding-top: 20px;
    @include phone-only {
      // A word has to be pretty long to need breaking mid-word
      // But this is what does it
      // hyphens: auto;
      // overflow-wrap: break-word;
    }
  }
  .phone-only {
    display: none;
    @include phone-only {
      display: block;
      .layout-left-item {
        justify-self: start; // Affects mobile Chromium
      }
    }
  }
  .tablet-portrait-up {
    display: none;
    @include tablet-portrait-up {
      display: grid;
    }
  }
}

:global(.descriptive-text) {
  // All headers within are h3
  h3 {
    font-size: 1rem;
    margin: 0; // Surrounding <p>s handle it
  }
  // Line the text up with its header by removing top margin
  @include tablet-portrait-up {
    // This <p> is set:html'd
    .layout-right-item :global(p:first-child) {
      margin-top: 0;
    }
  }
  // Headers go above the text on mobile, otherwise they take up loads of
  // room on the left.
  @include phone-only {
    .layout-grid-left-right {
      grid-auto-flow: row;
      grid-template-columns: none;
      // Undo the stuff we set for larger screens
      .layout-left-item {
        justify-self: start;
      }
      .layout-right-item {
        border: none;
        padding: unset;
      }
    }
  }
}

:global(#ChildrenInParentLabel) {
  // Border here vs. above, as we don't know if SystemDescription will exist
  border-top: 1px solid var(--border-strong);
  h2 {
    margin: 0;
    padding-top: 15px;
    padding-bottom: 15px;
  }
  // On mobile, override the grid
  @include phone-only {
    border-bottom: 1px solid rgb(130, 94, 94);
    h2.layout-right-item {
      padding: 10px 0;
    }
    .layout-grid-left-right {
      display: block;
    }
    .layout-right-item {
      border: none;
      padding-left: 0;
    }
  }
}

:global(#ChildrenInParentList) {
  border-bottom: 1px solid var(--border-strong);
  h2 {
    font-size: 1rem;
    margin: 0;
  }
  ol.acid-list {
    list-style-type: none;
    margin: 0;
    padding: 0;
    h3 {
      font-size: 1rem;
      margin: 0;
    }
  }
  // Bring the list away from the light grey border a touch
  @include phone-only {
    ol {
      li {
        .layout-left-item,
        .layout-right-item {
          padding-top: 10px;
        }
      }
    }
  }
}
