/* common.scss
 *
 * Use this for commonly-named classes etc. Then just @use directly in a
 * component and there's nothing to declare there.
 */
@import "normalize.css";

@mixin dark {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}
@mixin phone-only {
  @media (max-width: 599px) {
    @content;
  }
}
@mixin tablet-portrait-up {
  @media (min-width: 600px) {
    @content;
  }
}
@mixin tablet-landscape-up {
  @media (min-width: 900px) {
    @content;
  }
}
@mixin desktop-up {
  @media (min-width: 1200px) {
    @content;
  }
}
@mixin big-desktop-up {
  @media (min-width: 1800px) {
    @content;
  }
}

/* -------------------------------- Variables ------------------------------- */
:root {
  --content-max-width: 600px;
  --content-padding: 1rem;

  --tiny: 5px;
  --small: 8px;
  --medium: 12px;
  --large: 16px;
  --xlarge: 20px;

  --border-strong: light-dark(#111, #eee);
  --border-accent: light-dark(#11b, #99c);
  --secondary-content-bg: light-dark(#f3f3f3, #111);
}

/* -------------------------------- Elements -------------------------------- */

footer {
  margin-top: 100px;
}

html {
  color-scheme: light dark;
}

main {
  font-family: "Berkeley Mono", ui-monospace, "Cascadia Code", "Source Code Pro",
    Menlo, Consolas, "DejaVu Sans Mono", monospace;
}

/* ----------------------------- Utility classes ---------------------------- */
// Spans the page width without margin. Used for full-width effects e.g.
// background & border. No content should live at this level.
.Slice {
  // Active vs. inactive highlighting
  // .active-top/-bottom do the border
  &.active-top {
    border-top: 1px solid var(--border-strong);
  }
  &.active-bottom {
    border-bottom: 1px solid var(--border-strong);
  }
  // .secondary-content-bg does the not-active bg tint
  &.secondary-content-bg {
    background-color: var(--secondary-content-bg);
  }

  // Thicken the border below search
  &.search-border {
    border-bottom: 2px solid var(--border-strong);
  }

  // The inner container is what brings us in from the edges, with padding
  // Everything absolutely everything should live in here
  .inner-container {
    max-width: var(--content-max-width);
    margin: 0 auto;
    padding: 0 var(--content-padding);
    box-sizing: border-box;
  }
}

// The style where we have a label down the left, and the text on the right.
// Or on mobile, label above then text below. This is always contained in a
// <Slice>, but it's out here as its own thing as they're not _really_ related.
.label-text-container {
  h2 {
    // font-size: 1rem;
    // line-height: 1.4; // line up with the adjacent <p>
    // margin: 0;
    // &.active-item {
    //   font-size: 1.6rem;
    // }
  }

  h3 {
    // padding-top: var(--large);
  }

  // Pad the internal text element so we retain the grey divider
  .text {
    // padding-bottom: var(--small);
  }

  @include tablet-portrait-up {
    display: grid;
    grid-template-columns: 10ch auto;

    .label {
      // padding: var(--tiny) 8px var(--tiny) 0;
      justify-self: end;
    }
    .text {
      border-left: 1.5px solid light-dark(#ccc, #333);
      // line-height: 1.4; // align baselines
      // padding: var(--tiny) 0 var(--tiny) 8px;
    }
  }
}

/* ------------------- Elements styled with a class or ID ------------------- */
// Explain why they're here and not in their component.

// The p here is set:html'd, so doesn't pick up styling from the component.
div.ac-label {
  div.title {
    p + p {
      // margin-top: 1ch;
    }
  }
}
