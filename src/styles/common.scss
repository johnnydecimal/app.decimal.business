@forward "mixins";
@use "mixins" as *;

/* -------------------------------- Elements -------------------------------- */

// Spans the page width without margin. Used for full-width effects e.g.
// background & border. No content should live at this level.
// This blob of style only includes stuff that applies to the whole slice,
// regardless of its content.

// This is common for breadcrumbs at all sizes, and descriptive text on larger
@mixin layout-grid-100px-auto {
  display: grid;
  grid-template-columns: 110px auto;
  // On mobile, this takes a lot of room on the left. Reclaim a touch.
  @include phone-only {
    grid-template-columns: 60px auto;
  }
  .label {
    justify-self: end;
    padding: var(--tiny) var(--small) var(--tiny) 0;
  }
  .text {
    border-left: 1.5px solid light-dark(#ccc, #333);
    padding: var(--tiny) 0 var(--tiny) var(--small);
  }
}

/* -------------------------------- NEW STUFF ------------------------------- */
/* --------------------------------- Layouts -------------------------------- */
.layout-grid-left-right {
  display: grid;
  grid-template-columns: 110px auto;
  @include phone-only {
    grid-template-columns: 60px auto;
  }
}
// Don't nest these in the declaration above! When you do that, you run in to
// specificity problems trying to use .padding-t-10px and so on. There's no
// reason for them to be nested. They work just fine.
.layout-left-item {
  justify-self: end;
  padding: var(--tiny) var(--small) var(--tiny) 0;
}
.layout-right-item {
  border-left: 1.5px solid light-dark(#ccc, #333);
  padding: var(--tiny) 0 var(--tiny) var(--small);
  &.border-none {
    border-left: none;
  }

  // When we set:html text in here, e.g. HowToText, control the headers
  // TODO in the future, pull the H1s out and then re-style the remainder
  // set:html'd needs :global
  :global(h1) {
    font-size: 1.2rem;
  }
  :global(h2, h3) {
    font-size: 1rem;
  }
}

/* ---------------------- Moved out of Component:global --------------------- */
// And I can't tell you why they all need the :global. I think it's a bug.
:global(#SystemBreadcrumb),
:global(#AreaBreadcrumb),
:global(#CategoryBreadcrumb),
:global(#IdBreadcrumb) {
  h3 {
    font-size: 1rem;
    font-weight: normal;
    margin: 0;
  }
}

:global(#Header) {
  h1 {
    margin: 0;
    padding-top: 20px;
    @include phone-only {
      // A word has to be pretty long to need breaking mid-word
      // But this is what does it
      // hyphens: auto;
      // overflow-wrap: break-word;
    }
  }
  .phone-only {
    display: none;
    @include phone-only {
      display: block;
      .layout-left-item {
        justify-self: start; // Affects mobile Chromium
      }
    }
  }
  .tablet-portrait-up {
    display: none;
    @include tablet-portrait-up {
      display: grid;
    }
  }
}

:global(.main-text) {
  // All headers within are h3
  :global(h3) {
    font-size: 1rem;
    font-weight: bold;
    margin: 0; // Surrounding <p> handles it
    text-align: right;
    @include phone-only {
      font-size: 1.1rem; // Pop the headers a bit
      margin-top: 0.5rem; // Room to breathe
      text-decoration: underline;
    }
    @include tablet-portrait-up {
      margin: 0 0 1rem 0; // Spaces out multi-line headers
    }

    // Actually, if you have a double-height label and a single-height text,
    // which might be the case in our user-prefs layout, it's a bit tight. Fix:
    // -- removing just for now, but this is the fix
    // @include tablet-portrait-up {
    //   margin-bottom: 0.8rem;
    // }
  }
  :global(h4) {
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
    text-decoration: underline;
    text-decoration-color: var(--border-strong);
    text-decoration-thickness: 2px;
    :global(+ p) {
      margin-top: 0.5rem;
    }
  }

  // Line the text up with its header by removing top margin
  @include tablet-portrait-up {
    .layout-right-item {
      // This <p> is set:html'd
      :global(p:first-child) {
        margin-top: 0;
      }
      // If the first thing is an ul, it's the same
      :global(ul:first-child) {
        margin-top: 0;
      }
      // If the first thing is an ol, it's the same
      :global(ol:first-child) {
        margin-top: 0;
      }
    }
  }
  // But reset these margins if we're in a blockquote
  // TODO probably a nicer way to do this oh yeah you had to !important
  :global(blockquote > p) {
    margin-top: 1em !important;
  }

  // Headers go above the text on mobile, otherwise they take up loads of
  // room on the left.
  @include phone-only {
    .layout-grid-left-right {
      grid-auto-flow: row;
      grid-template-columns: none;
      // Undo the stuff we set for larger screens
      .layout-left-item {
        justify-self: start;
      }
      .layout-right-item {
        border: none;
        padding: unset;
      }
    }
  }
}

:global(#ChildrenInParentLabel) {
  // Border here vs. above, as we don't know if SystemDescription will exist
  border-top: 1px solid var(--border-strong);
  h2 {
    margin: 0;
    padding-top: 15px;
    padding-bottom: 15px;
  }
  // On mobile, override the grid
  @include phone-only {
    border-bottom: 1px solid rgb(130, 94, 94);
    h2.layout-right-item {
      padding: 10px 0;
    }
    .layout-grid-left-right {
      display: block;
    }
    .layout-right-item {
      border: none;
      padding-left: 0;
    }
  }
}

:global(#ChildrenInParentList) {
  border-bottom: 1px solid var(--border-strong);
  h2 {
    font-size: 1rem;
    margin: 0;
  }
  ol.acid-list {
    list-style-type: none;
    margin: 0;
    padding: 0;
    h3 {
      font-size: 1rem;
      margin: 0;
    }
  }
  .header-item:not(:first-of-type) {
    border-top: 1px solid #ccc;
    .layout-left-item {
      padding-top: 1rem;
    }
    .layout-right-item {
      padding-top: 1rem;
    }
  }
  .header-item {
    a.blackSquare {
      text-decoration: none;
    }
  }
  // Bring the list away from the light grey border a touch
  @include phone-only {
    ol {
      li {
        .layout-left-item,
        .layout-right-item {
          padding-top: 10px;
        }
      }
    }
  }
}
