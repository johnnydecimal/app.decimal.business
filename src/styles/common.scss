/* common.scss
 *
 * Use this for commonly-named classes etc. Then just @use directly in a
 * component and there's nothing to declare there.
 */
@import "normalize.css";

@mixin dark {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}
@mixin phone-only {
  @media (max-width: 599px) {
    @content;
  }
}
@mixin tablet-portrait-up {
  @media (min-width: 600px) {
    @content;
  }
}
@mixin tablet-landscape-up {
  @media (min-width: 900px) {
    @content;
  }
}
@mixin desktop-up {
  @media (min-width: 1200px) {
    @content;
  }
}
@mixin big-desktop-up {
  @media (min-width: 1800px) {
    @content;
  }
}

/* -------------------------------- Variables ------------------------------- */
:root {
  --content-max-width: 600px;
  --content-padding: 1rem;

  // Meh are these useful?
  --tiny: 5px;
  --small: 8px;
  --medium: 12px;
  --large: 16px;
  --xlarge: 20px;
  // Is this better
  --component-padding: 20px;

  --border-strong: light-dark(#111, #eee);
  --border-accent: light-dark(#11b, #99c);
  --secondary-content-bg: light-dark(#f3f3f3, #111);
}

/* -------------------------------- Elements -------------------------------- */

footer {
  border-top: 2px solid black;
}

html {
  color-scheme: light dark;
  font-family: "Berkeley Mono", ui-monospace, "Cascadia Code", "Source Code Pro",
    Menlo, Consolas, "DejaVu Sans Mono", monospace;
  line-height: 1.4;
}

// Spans the page width without margin. Used for full-width effects e.g.
// background & border. No content should live at this level.
// This blob of style only includes stuff that applies to the whole slice,
// regardless of its content.
.Slice {
  // Thicken the border below search
  &.search-border {
    border-bottom: 2px solid var(--border-strong);
  }
  // Push the system breadcrumb off search a touch b/c of the thick border
  &.system.breadcrumb > .inner-container > .label-text-grid > h2.label,
  &.system.breadcrumb > .inner-container > .label-text-grid > h2.text {
    padding-top: calc(var(--tiny) + 2px);
  }

  // Active vs. inactive highlighting
  // .active-top/-bottom do the border
  &.active-top {
    border-top: 1px solid var(--border-strong);
  }
  &.active-bottom {
    border-bottom: 1px solid var(--border-strong);
  }
  // .secondary-content-bg does the not-active bg tint
  &.secondary-content-bg {
    background-color: var(--secondary-content-bg);
  }

  // The inner container is what brings us in from the edges, with padding
  // Everything absolutely everything should live in here
  .inner-container {
    max-width: var(--content-max-width);
    margin: 0 auto;
    padding: 0 var(--content-padding);
    box-sizing: border-box;
  }

  // But now for the specific things that _do_ live inside there, define them
  // below so this doesn't get too busy.
}

// This is common for breadcrumbs at all sizes, and descriptive text on larger
@mixin layout-grid-10ch-auto {
  display: grid;
  grid-template-columns: 10ch auto;
  // On mobile, this takes a lot of room on the left. Reclaim a touch.
  @include phone-only {
    grid-template-columns: 8ch auto;
  }
  .label {
    justify-self: end;
    padding: var(--tiny) var(--small) var(--tiny) 0;
  }
  .text {
    border-left: 1.5px solid light-dark(#ccc, #333);
    padding: var(--tiny) 0 var(--tiny) var(--small);
  }
}

// Breadcrumbs. They look mostly the same on all platforms.
.breadcrumb {
  .label-text-grid {
    @include layout-grid-10ch-auto;

    // Using h2 for semantics: simplify appearance
    h2 {
      font-size: 1rem;
      font-weight: normal;
      margin: 0;
      // Even medium words can easily cause right-spill; force a break
      @include phone-only {
        hyphens: auto;
        word-break: break-word;
      }
    }

    // Make the active breadcrumb stand out
    &.active-item {
      h2 {
        font-size: 1.6rem;
        font-weight: bold;
        padding-top: 1rem;
        @include phone-only {
          font-size: 1.4rem;
        }
      }

      // On mobile, the active item's breadcrumb doesn't need the dividing line;
      // otherwise we have to separate it somehow from the description
      .text {
        @include phone-only {
          border-left: unset;
        }
      }
    }
  }
}

// The main body text
.descriptive-text,
.acid-list {
  .label-text-grid {
    // Mobile just flows like basic HTML; bigger gets the two-column layout
    @include tablet-portrait-up {
      @include layout-grid-10ch-auto;
    }
    // Using h2 for semantics: simplify appearance
    h2 {
      font-size: 1rem;
      margin: 0;
      // On mobile, bump the size and give it a bit of room at the top
      // (p's margin takes care of the bottom)
      @include phone-only {
        font-size: 1.2rem;
        margin-top: var(--xlarge);
      }
    }

    // Line up the top of first paragraph with its label on larger screens
    .text {
      @include tablet-portrait-up {
        p:first-child {
          margin-top: 0;
        }
      }
    }
  }
}

h2#children-in-this-parent-label {
  font-size: 1.4rem;
  margin: 0;
  padding: 20px 0 10px 8px;
  @include phone-only {
    padding-left: 0;
  }
}

/* -------------------------------- NEW STUFF ------------------------------- */
// The layout class that gives us the 1/3rd left 2/3rds right split, with a
// grey dividing border. It's the same on mobile, but we shrink the left.

/* ------------------------ Layouts - no style here! ------------------------ */
.layout-grid-left-right {
  display: grid;
  grid-template-columns: 10ch auto;
  @include phone-only {
    grid-template-columns: 8ch auto;
  }
}
// Don't nest these in the declaration above! When you do that, you run in to
// specificity problems trying to use .padding-t-10px and so on. There's no
// reason for them to be nested. They work just fine.
.layout-left-item {
  justify-self: end;
  padding: var(--tiny) var(--small) var(--tiny) 0;
}
.layout-right-item {
  border-left: 1.5px solid light-dark(#ccc, #333);
  padding: var(--tiny) 0 var(--tiny) var(--small);
}

/* --------------------- Style - specific page elements --------------------- */
// The list of 'children in this parent'
ol.acid-list {
  list-style-type: none;
  margin: 0;
  padding: 0;

  // It's a bit roomy by default
  p {
    margin: 5px 0;
  }
}

/* ------------------------- Style - think Tailwind ------------------------- */
.border-t-1px {
  border-top: 1px solid black;
}
.font-1rem {
  font-size: 1rem;
}
.margin-0 {
  margin: 0;
}
.padding-t-15px {
  padding-top: 15px;
}
/* ------------------------------ END NEW STUFF ----------------------------- */
