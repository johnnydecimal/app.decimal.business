---
import { createClerkClient } from "@clerk/astro/server";

const clerkClient = createClerkClient({
  secretKey: import.meta.env.CLERK_SECRET_KEY,
});

const { userId } = Astro.locals.auth();
const user = await clerkClient.users.getUser(userId!);
let publicMetadata = user.publicMetadata;
console.log("publicMetadata:", publicMetadata);

const API_BASE_URL =
  import.meta.env.PUBLIC_API_BASE_URL ||
  import.meta.env.DEPLOY_URL ||
  import.meta.env.URL ||
  "";

let message;
if (Astro.request.method === "POST") {
  console.log("ðŸ“® callApi/POST loop has been called");
  if (publicMetadata.firstRunComplete) {
    const updateUserMetadata = await clerkClient.users.updateUserMetadata(
      userId!,
      {
        publicMetadata: {
          firstRunComplete: false,
        },
      }
    );
  } else {
    const updateUserMetadata = await clerkClient.users.updateUserMetadata(
      userId!,
      {
        publicMetadata: {
          firstRunComplete: true,
        },
      }
    );
  }

  // This is the call-an-API way, which we might not need?
  // try {
  //   const data = await Astro.request.formData();
  //   const res = await fetch(`${API_BASE_URL}/devapi/updatePublicMetadata/`, {
  //     method: "POST",
  //     headers: { "Content-Type": "application/json" },
  //     body: JSON.stringify({ hi: "there" }),
  //   });
  //   const result = await res.json();
  //   console.log("result:", result);
  //   message = result.message;
  // } catch (e) {
  //   console.log("some error:", e);
  // }
}
---

<form method="POST">
  <label>
    Username:
    <input type="text" name="username" />
  </label>
  <button>Submit</button>
</form>

<div id="firstRunComplete">
  <!-- @ts-ignore -->
  first run: {publicMetadata.firstRunComplete.toString()}
</div>
