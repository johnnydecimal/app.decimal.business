---
import { marked } from "marked";
import Layout from "../layouts/Layout.astro";
/**
 * Each standard page gets rendered to /AC.ID for the simplest possible
 * experience. There's no clever sub-foldering (although there's nothing
 * stopping us from doing that _as well_).
 *
 * This way we don't need a _redirects or whatever, we can just use this
 * as the canonical URL.
 */

import sb from "../content/data/smallbusiness.ts";

export async function getStaticPaths() {
  /**
   * All we need to do here is return an array of objects that have
   * the id param set. This becomes the list of pages available at
   * /[id].
   *
   * If we also want data available to the page when it's rendered,
   * we pull that out here and load it on to props.
   */

  interface PageParams {
    id: string;
  }
  interface PageProps {
    areaId: string;
    areaTitle: string;
    categoryId: string;
    categoryTitle: string;
    idNumber: string;
    idTitle: string;
    examples: string;
    moreInfo: string;
    exceptions: string;
    alsoSee: string;
    rationale: string;
  }
  interface PageData {
    params: PageParams;
    props: PageProps;
  }

  const pageData: PageData[] = [];

  const areas = Object.keys(sb.areas);
  /**
   * For each iteration, we build an object with params, and props. It's
   * made up of the area/category/id properties that we come across as
   * we traverse the system.
   *
   * When we get down to the ID, these variables should be loaded with the
   * stuff we need to generate the page. We'll push them on to returnArray.
   */

  areas.forEach((area) => {
    const areaId = sb.areas[area].id;
    const areaTitle = sb.areas[area].title;

    const categories =
      // TS: does the object exist?
      sb.areas[area].categories
        ? // Then list out its keys
          Object.keys(sb.areas[area].categories)
        : // Otherwise return an empty array
          [];

    categories.forEach((category) => {
      // Load up the return objects
      if (!sb.areas[area].categories?.[category]) {
        throw new Error("Keeping TS happy");
      }
      const categoryId = sb.areas[area].categories?.[category]?.id;
      const categoryTitle = sb.areas[area].categories?.[category]?.title;

      const ids =
        // TS: does the object exist?
        sb.areas[area].categories?.[category].ids
          ? // Then list out its keys
            Object.keys(sb.areas[area].categories[category].ids)
          : // Otherwise return an empty array
            [];

      ids.forEach((id) => {
        // Load up the return objects
        let idNumber,
          idTitle,
          examples,
          moreInfo,
          exceptions,
          alsoSee,
          rationale = "";
        if (sb.areas[area].categories?.[category].ids?.[id]) {
          idNumber = sb.areas[area].categories[category].ids[id].id;
          idTitle = sb.areas[area].categories[category].ids[id].title;
        }
        if (
          sb.areas[area].categories?.[category].ids?.[id].extensions
            ?.smallBusiness
        ) {
          examples =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .examples || "";
          moreInfo =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .moreInfo || "";
          exceptions =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .exceptions || "";
          alsoSee =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .alsoSee || "";
          rationale =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .rationale || "";
        }

        // Now push all this to the return array
        pageData.push({
          params: { id: id },
          props: {
            areaId,
            areaTitle,
            categoryId,
            categoryTitle,
            idNumber,
            idTitle,
            examples: marked(examples || ""),
            moreInfo: marked(moreInfo || ""),
            exceptions: marked(exceptions || ""),
            alsoSee: marked(alsoSee || ""),
            rationale: marked(rationale || ""),
          },
        });
      });
    });
  });

  return pageData;
}

const { id } = Astro.params;
const {
  areaId,
  areaTitle,
  categoryId,
  categoryTitle,
  idTitle,
  examples,
  moreInfo,
  exceptions,
  alsoSee,
  rationale,
} = Astro.props;
---

<Layout title={`${id} ${idTitle}`}>
  <h1 id="jd-id">{id} {idTitle}</h1>
  <button id="copy-jd-id">Copy</button>

  <div class="area">
    <code>{areaId} {areaTitle} > {categoryId} {categoryTitle}</code>
  </div>

  <div>
    {
      examples === "" ? null : (
        <>
          <h3>Examples</h3>
          <div set:html={examples} />
        </>
      )
    }
    {
      moreInfo === "" ? null : (
        <>
          <h3>More info</h3>
          <div set:html={moreInfo} />
        </>
      )
    }
    {
      exceptions === "" ? null : (
        <>
          <h3>Exceptions</h3>
          <div set:html={exceptions} />
        </>
      )
    }
    {
      alsoSee === "" ? null : (
        <>
          <h3>Also see</h3>
          <div set:html={alsoSee} />
        </>
      )
    }
    {
      rationale === "" ? null : (
        <>
          <h3>Rationale</h3>
          <div set:html={rationale} />
        </>
      )
    }
  </div>
</Layout>

<style></style>

<script>
  // @ts-ignore
  document.getElementById("copy-jd-id").addEventListener("click", function () {
    // Get the text from the div
    // @ts-ignore
    const textToCopy = document.getElementById("jd-id").innerText;

    // Copy the text to the clipboard
    navigator.clipboard
      .writeText(textToCopy)
      .then(() => {
        alert("Text copied to clipboard!");
      })
      .catch((err) => {
        console.error("Failed to copy text: ", err);
      });
  });
</script>
