---
import Layout from "../layouts/Layout.astro";
/**
 * Each standard page gets rendered to /AC.ID for the simplest possible
 * experience. There's no clever sub-foldering (although there's nothing
 * stopping us from doing that _as well_).
 *
 * This way we don't need a _redirects or whatever, we can just use this
 * as the canonical URL.
 */

import sb from "../content/data/smallbusiness.ts";

export async function getStaticPaths() {
  /**
   * All we need to do here is return an array of objects that have
   * the id param set. This becomes the list of pages available at
   * /[id].
   *
   * If we also want data available to the page when it's rendered,
   * we pull that out here and load it on to props.
   */

  const returnArray = [];

  const areas = Object.keys(sb.areas);
  /**
   * For each iteration, we build an object with params, and props. It's
   * made up of the area/category/id properties that we come across as
   * we traverse the system.
   *
   * When we get down to the ID, these variables should be loaded with the
   * stuff we need to generate the page. We'll push them on to returnArray.
   */

  console.log("🏃 -----------------");
  console.log("🪵 areas:", areas);

  areas.forEach((area) => {
    const areaId = sb.areas[area].id;
    const areaTitle = sb.areas[area].title;

    const categories =
      // TS: does the object exist?
      sb.areas[area].categories
        ? // Then list out its keys
          Object.keys(sb.areas[area].categories)
        : // Otherwise return an empty array
          [];
    console.log(`🪵 categories in ${area}:`, categories);

    categories.forEach((category) => {
      // Load up the return objects
      let categoryId: string, categoryTitle: string;
      if (sb.areas[area].categories?.[category]) {
        categoryId = sb.areas[area].categories[category].id;
        categoryTitle = sb.areas[area].categories[category].title;
      }

      const ids =
        // TS: does the object exist?
        sb.areas[area].categories?.[category].ids
          ? // Then list out its keys
            Object.keys(sb.areas[area].categories[category].ids)
          : // Otherwise return an empty array
            [];

      console.log(`🪵 ids in ${category}:`, ids);

      ids.forEach((id) => {
        // Load up the return objects
        let idNumber,
          idTitle,
          examples,
          moreInfo,
          exceptions,
          alsoSee,
          rationale = "";
        if (sb.areas[area].categories?.[category].ids?.[id]) {
          idNumber = sb.areas[area].categories[category].ids[id].id;
          idTitle = sb.areas[area].categories[category].ids[id].title;
        }
        if (
          sb.areas[area].categories?.[category].ids?.[id].extensions
            ?.smallBusiness
        ) {
          examples =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .examples || "";
          moreInfo =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .moreInfo || "";
          exceptions =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .exceptions || "";
          alsoSee =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .alsoSee || "";
          rationale =
            sb.areas[area].categories[category].ids[id].extensions.smallBusiness
              .rationale || "";
        }

        // Now push all this to the return array
        returnArray.push({
          params: { id: id },
          props: {
            areaId,
            areaTitle,
            categoryId,
            categoryTitle,
            idNumber,
            idTitle,
            examples,
            moreInfo,
            exceptions,
            alsoSee,
            rationale,
          },
        });
      });
    });
  });

  return returnArray;
}

const { id } = Astro.params;
const {
  areaId,
  areaTitle,
  categoryId,
  categoryTitle,
  idTitle,
  examples,
  moreInfo,
  exceptions,
  alsoSee,
  rationale,
} = Astro.props;
---

<Layout>
  <h1>{id} {idTitle}</h1>

  <div class="area">Area: {areaId} {areaTitle}</div>
  <div class="category">Category: {categoryId} {categoryTitle}</div>

  <div>
    <h3>Examples</h3>
    <div>{examples}</div>
    <h3>More info</h3>
    <div>{moreInfo}</div>
    <h3>More info</h3>
    <div>{moreInfo}</div>
    <h3>Exceptions</h3>
    <div>{exceptions}</div>
    {
      alsoSee === "" ? null : (
        <>
          <h3>Also see</h3>
          <div>{alsoSee}</div>
        </>
      )
    }
    <h3>Rationale</h3>
    <div>{rationale}</div>
  </div>
</Layout>

<style></style>
