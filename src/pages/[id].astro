---
// Layout
import Layout from "../layouts/Layout.astro";
// Helpers
import generateIdsWithACContext from "../helpers/generateIdsWithACContext.ts";
import wikiLinkify from "../helpers/wikiLinkify";
// Data
import sb from "../content/data/smallbusiness.ts";

/**
 * Each standard page gets rendered to /AC.ID for the simplest possible
 * experience. There's no clever sub-foldering (although there's nothing
 * stopping us from doing that _as well_).
 *
 * This way we don't need a _redirects or whatever, we can just use this
 * as the canonical URL.
 */

export async function getStaticPaths() {
  /**
   * All we need to do here is return an array of objects that have
   * the id param set. This becomes the list of pages available at
   * /[id].
   *
   * If we also want data available to the page when it's rendered,
   * we pull that out here and load it on to props.
   *
   * Update: we've factored that out to generateIdsWithACContext().
   */

  interface PageParams {
    id: string;
  }
  interface PageProps {
    areaId: string;
    areaTitle: string;
    categoryId: string;
    categoryTitle: string;
    idNumber: string;
    idTitle: string;
    idDescription?: string;
    examples?: string;
    moreInfo?: string;
    exceptions?: string;
    alsoSee?: string;
    rationale?: string;
  }
  interface PageData {
    params: PageParams;
    props: PageProps;
  }

  const pageData: PageData[] = [];

  const idsWithACContext = await generateIdsWithACContext(sb);

  for (const id of idsWithACContext) {
    pageData.push({
      params: { id: id.idNumber },
      props: {
        areaId: wikiLinkify(id.areaId, idsWithACContext),
        areaTitle: wikiLinkify(id.areaTitle, idsWithACContext),
        categoryId: wikiLinkify(id.categoryId, idsWithACContext),
        categoryTitle: wikiLinkify(id.categoryTitle, idsWithACContext),
        idNumber: wikiLinkify(id.idNumber, idsWithACContext),
        idTitle: wikiLinkify(id.idTitle, idsWithACContext),
        idDescription:
          id.idDescription && wikiLinkify(id.idDescription, idsWithACContext),
        examples: id.examples && wikiLinkify(id.examples, idsWithACContext),
        moreInfo: id.moreInfo && wikiLinkify(id.moreInfo, idsWithACContext),
        exceptions:
          id.exceptions && wikiLinkify(id.exceptions, idsWithACContext),
        alsoSee: id.alsoSee && wikiLinkify(id.alsoSee, idsWithACContext),
        rationale: id.rationale && wikiLinkify(id.rationale, idsWithACContext),
      },
    });
  }

  return pageData;
}

const { id } = Astro.params;
const {
  areaId,
  areaTitle,
  categoryId,
  categoryTitle,
  idTitle,
  idDescription,
  examples,
  moreInfo,
  exceptions,
  alsoSee,
  rationale,
} = Astro.props;

export const prerender = true;
---

<Layout title={`${id} ${idTitle}`}>
  <h1 id="jd-id">{id} {idTitle}</h1>
  <button id="copy-jd-id">Copy</button>

  <div class="id-title">
    <a href={areaId}>{areaId} {areaTitle}</a> > <a href={categoryId}
      >{categoryId} {categoryTitle}</a
    >
  </div>

  {
    idDescription && (
      <>
        <h3>Description</h3>
        <div set:html={idDescription} />
      </>
    )
  }
  {
    examples && (
      <>
        <h3>Examples</h3>
        <div set:html={examples} />
      </>
    )
  }
  {
    moreInfo && (
      <>
        <h3>More info</h3>
        <div set:html={moreInfo} />
      </>
    )
  }
  {
    exceptions && (
      <>
        <h3>Exceptions</h3>
        <div set:html={exceptions} />
      </>
    )
  }
  {
    alsoSee && (
      <>
        <h3>Also see</h3>
        <div set:html={alsoSee} />
      </>
    )
  }
  {
    rationale && (
      <>
        <h3>Rationale</h3>
        <div set:html={rationale} />
      </>
    )
  }
</Layout>

<style></style>

<script>
  // @ts-ignore
  document.getElementById("copy-jd-id").addEventListener("click", function () {
    // Get the text from the div
    // @ts-ignore
    const textToCopy = document.getElementById("jd-id").innerText;

    // Copy the text to the clipboard
    navigator.clipboard
      .writeText(textToCopy)
      .then(() => {
        alert("Text copied to clipboard!");
      })
      .catch((err) => {
        console.error("Failed to copy text: ", err);
      });
  });
</script>
