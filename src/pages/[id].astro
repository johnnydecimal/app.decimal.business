---
import { marked } from "marked";
import Layout from "../layouts/Layout.astro";
/**
 * Each standard page gets rendered to /AC.ID for the simplest possible
 * experience. There's no clever sub-foldering (although there's nothing
 * stopping us from doing that _as well_).
 *
 * This way we don't need a _redirects or whatever, we can just use this
 * as the canonical URL.
 */

import sb from "../content/data/smallbusiness.ts";

export async function getStaticPaths() {
  /**
   * All we need to do here is return an array of objects that have
   * the id param set. This becomes the list of pages available at
   * /[id].
   *
   * If we also want data available to the page when it's rendered,
   * we pull that out here and load it on to props.
   */

  interface PageParams {
    id: string;
  }
  interface PageProps {
    areaId: string;
    areaTitle: string;
    categoryId: string;
    categoryTitle: string;
    idNumber: string;
    idTitle: string;
    idDescription?: string;
    examples?: string;
    moreInfo?: string;
    exceptions?: string;
    alsoSee?: string;
    rationale?: string;
  }
  interface PageData {
    params: PageParams;
    props: PageProps;
  }
  const pageData: PageData[] = [];

  const areas = Object.keys(sb.areas);

  for (const area of areas) {
    const areaId = sb.areas[area].id;
    const areaTitle = sb.areas[area].title;

    const categories = sb.areas[area].categories
      ? Object.keys(sb.areas[area].categories)
      : [];

    for (const category of categories) {
      if (!sb.areas[area].categories?.[category]) {
        throw new Error("1: Keeping TS happy -- this shouldn't be possible");
      }
      const categoryId = sb.areas[area].categories[category].id;
      const categoryTitle = sb.areas[area].categories[category].title;

      const ids = sb.areas[area].categories[category].ids
        ? Object.keys(sb.areas[area].categories[category].ids)
        : [];

      for (const id of ids) {
        if (!sb.areas[area].categories[category].ids?.[id]) {
          throw new Error("2: Keeping TS happy -- this shouldn't be possible");
        }
        const idNumber = sb.areas[area].categories[category].ids[id].id;
        const idTitle = sb.areas[area].categories[category].ids[id].title;
        const idDescription =
          sb.areas[area].categories[category].ids[id].description;

        let mdExamples, mdMoreInfo, mdExceptions, mdAlsoSee, mdRationale;
        const sbDescriptions =
          sb.areas[area].categories[category].ids[id].extensions?.smallBusiness;
        if (sbDescriptions) {
          const { examples, moreInfo, exceptions, alsoSee, rationale } =
            sbDescriptions;

          mdExamples = examples ? await marked.parse(examples) : undefined;
          mdMoreInfo = moreInfo ? await marked.parse(moreInfo) : undefined;
          mdExceptions = exceptions
            ? await marked.parse(exceptions)
            : undefined;
          mdAlsoSee = alsoSee ? await marked.parse(alsoSee) : undefined;
          mdRationale = rationale ? await marked.parse(rationale) : undefined;
        }

        pageData.push({
          params: { id: id },
          props: {
            areaId,
            areaTitle,
            categoryId,
            categoryTitle,
            idNumber,
            idTitle,
            idDescription,
            examples: mdExamples,
            moreInfo: mdMoreInfo,
            exceptions: mdExceptions,
            alsoSee: mdAlsoSee,
            rationale: mdRationale,
          },
        });
      }
    }
  }

  return pageData;
}

const { id } = Astro.params;
const {
  areaId,
  areaTitle,
  categoryId,
  categoryTitle,
  idTitle,
  idDescription,
  examples,
  moreInfo,
  exceptions,
  alsoSee,
  rationale,
} = Astro.props;
---

<Layout title={`${id} ${idTitle}`}>
  <h1 id="jd-id">{id} {idTitle}</h1>
  <button id="copy-jd-id">Copy</button>

  <div class="id-title">
    <a href={areaId}>{areaId} {areaTitle}</a> > <a href={categoryId}
      >{categoryId} {categoryTitle}</a
    >
  </div>

  {
    idDescription && (
      <>
        <h3>Description</h3>
        <p>{idDescription}</p>
      </>
    )
  }
  {
    examples && (
      <>
        <h3>Examples</h3>
        <div set:html={examples} />
      </>
    )
  }
  {
    moreInfo && (
      <>
        <h3>More info</h3>
        <div set:html={moreInfo} />
      </>
    )
  }
  {
    exceptions && (
      <>
        <h3>Exceptions</h3>
        <div set:html={exceptions} />
      </>
    )
  }
  {
    alsoSee && (
      <>
        <h3>Also see</h3>
        <div set:html={alsoSee} />
      </>
    )
  }
  {
    rationale && (
      <>
        <h3>Rationale</h3>
        <div set:html={rationale} />
      </>
    )
  }
</Layout>

<style></style>

<script>
  // @ts-ignore
  document.getElementById("copy-jd-id").addEventListener("click", function () {
    // Get the text from the div
    // @ts-ignore
    const textToCopy = document.getElementById("jd-id").innerText;

    // Copy the text to the clipboard
    navigator.clipboard
      .writeText(textToCopy)
      .then(() => {
        alert("Text copied to clipboard!");
      })
      .catch((err) => {
        console.error("Failed to copy text: ", err);
      });
  });
</script>
