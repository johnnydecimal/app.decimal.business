---
import { marked } from "marked";
import { markedSmartypants } from "marked-smartypants";
marked.use(markedSmartypants());

import sb, {
  type AreaEntry,
  type CategoryEntry,
  type OpsEntry,
} from "src/data/smallBusinessFlat";
import wikiLinkify from "@helpers/wikiLinkify";
import Slice from "./common/Slice.astro";

// This component is passed the slug as `id`.
interface Props {
  id: string;
}
const { id } = Astro.props;

// To allow consistency between Area, Category, ID, and OpsManual, we refer to
// the current item -- one of those things -- as the 'entry'.

const entry = sb[id] as OpsEntry;
const title = entry.title;
const description = await marked.parse(wikiLinkify(entry.description));
// const emoji = entry.emoji;

const opsManual = entry.extensions.smallBusinessOpsManual;
const triggers = await marked.parse(wikiLinkify(opsManual.triggers));
const inputs = await marked.parse(wikiLinkify(opsManual.inputs));
const process = await marked.parse(wikiLinkify(opsManual.process));
const outputs = await marked.parse(wikiLinkify(opsManual.outputs));

const parentCNumber = entry.parentNumber;
const parentCEntry = sb[parentCNumber] as CategoryEntry;
const parentCTitle = parentCEntry.title;

const parentANumber = parentCEntry.parentNumber;
const parentAEntry = sb[parentANumber] as AreaEntry;
const parentATitle = parentAEntry.title;
---

<Slice>
  <div class="label-text-grid">
    <h2 class="number"><a href={parentANumber}>10-19</a></h2>
    <div class="title">{parentATitle}</div>
  </div>
</Slice>

<Slice>
  <div class="label-text-grid">
    <h2 class="number"><a href={parentCNumber}>11</a></h2>
    <div class="title">{parentCTitle}</div>
  </div>
</Slice>

<Slice>
  <div class="label-text-grid">
    <div class="number"><strong>{id}</strong></div>
    <div class="title"><strong>{title}</strong></div>
  </div>
</Slice>

<Slice>
  <div class="label-text-grid">
    <div></div>
    <div class="title" set:html={description} />
  </div>
</Slice>

{
  opsManual.diagram ? (
    <Slice>
      <div class="label-text-grid">
        <h2 class="label">Diagram</h2>
        <div class="mermaid text">{opsManual.diagram!}</div>
      </div>
    </Slice>
  ) : null
}

<Slice>
  <div class="label-text-grid">
    <h2 class="label">Triggers</h2>
    <div class="text" set:html={triggers} />
  </div>
</Slice>

<Slice>
  <div class="label-text-grid">
    <h2 class="label">Inputs</h2>
    <div class="text" set:html={inputs} />
  </div>
</Slice>

<Slice>
  <div class="label-text-grid">
    <h2 class="label">Process</h2>
    <div class="text" set:html={process} />
  </div>
</Slice>

<Slice>
  <div class="label-text-grid">
    <h2 class="label">Outputs</h2>
    <div class="text" set:html={outputs} />
  </div>
</Slice>

<style lang="scss">
  // @use "@styles/common" as *;
  @use "@styles/mixins" as *;

  h1 {
    font-size: 1rem;
  }
  h2 {
    font-size: 1rem;
  }

  .label-text-grid {
    // Mobile-first
    .title {
      margin-bottom: 1ch;
    }

    // TODO use the common styles
    @include tablet-portrait-up {
      display: grid;
      grid-template-columns: 10ch auto;

      .label,
      .number {
        padding: 1ch 1ch 0 0;
        justify-self: end;
      }
      .text,
      .title {
        border-left: 1.5px solid lightgrey;
        margin-bottom: unset;
        padding: 1ch 0 0 1ch;
      }
    }
  }

  // --------- old but might be useful ---------
  /* 
  h1#number-title {
    display: grid;
    grid-template-columns: auto 1fr auto;
    grid-template-areas:
      "number emoji"
      "title  title";
    gap: 1ch;

    .number,
    .emoji {
      font-size: 4rem;
      line-height: 1;
      @include mobile {
        justify-self: end;
      }
    }
    .number {
      grid-area: number;
    }
    .title {
      grid-area: title;
    }
    .emoji {
      grid-area: emoji;
      padding-top: 5px;
    }
  }
    */
</style>
