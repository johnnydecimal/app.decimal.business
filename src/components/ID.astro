---
/**
 * The category list view component. So we've navigated to
 * /jdex/11.
 *
 * The ID view component. So we're at /jdex/11.11.
 *
 * Shows a single ID, with all of its detail. Shows breadcrumbs
 * to its category and area.
 *
 * ```
 * 11.11 Eleven-eleven                                      [emoji, big?]
 *       The description of category eleven.
 *
 *       > Area > Category
 *
 *       # Header, e.g. Examples
 *       Content
 * ```
 *
 * So we need:
 * âˆš To be passed the number of the id to render. This is the slug.
 * âˆš The whole system to reference. Just import it directly.
 * âˆš The title of the ID for the main header.
 * - All of its other details for the main content.
 *   - Wiki-linking the descriptive text.
 * - Its parent category (number & title), and
 * - Its parent category's parent area (number & title).
 * - Linking the ID header to the ID URL.
 * - Denoting with styles and a â–  whether it's a header.
 */

// - To be passed the number of the id to render. This is the slug.
interface Props {
  id: string;
}

const { id } = Astro.props;

// - The whole system to reference. Just import it directly.
import sb, { type IdEntry } from "@content/data/smallBusinessFlat";

// - The title of the ID for the main header.
const idTitle = sb[id]?.title;

// - Where those descriptions have been rendered to HTML from Markdown.
import { marked } from "marked";
import { markedSmartypants } from "marked-smartypants";
marked.use(markedSmartypants());

// - All of its other details for the main content.
const idEntry = sb[id] as IdEntry;
const idEmoji = idEntry.emoji;
//   - Wiki-linking the descriptive text.
function wikiLinkify(text: string): string {
  // `text` is a Markdown string which might contain wiki-links like [[12.34]].
  return text.replace(/\[\[(\d{2}.\d{2})\]\]/g, (_match, p1) => {
    // If a match was made, `p1` is an ID. Return a [Markdown](link) to it.
    if (sb[p1]) {
      return `[${p1} ${sb[p1].title}](/jdex/${p1})`;
    } else {
      console.warn(
        `ðŸš¨ ID.astro: you tried to wiki-link to an ID that doesn't exist: ${p1}`
      );
      // Return the original text.
      return text;
    }
  });
}

const idDescription = idEntry.description && wikiLinkify(idEntry.description);
const idSb = idEntry.extensions?.smallBusiness;
const idExamples = idSb?.examples && (await marked.parse(idSb.examples));
const idMoreInfo = idSb?.moreInfo && (await marked.parse(idSb.moreInfo));
const idExceptions = idSb?.exceptions && (await marked.parse(idSb.exceptions));
const idAlsoSee =
  idSb?.alsoSee && (await marked.parse(wikiLinkify(idSb.alsoSee)));
const idRationale = idSb?.rationale && (await marked.parse(idSb.rationale));
---

<h1 id="number-title">
  <span class="number">{id}</span>
  <span class="title">{idTitle}</span>
  <span class="emoji">{idEmoji}</span>
</h1>

{
  idDescription ? (
    <div
      class="description"
      set:html={idDescription && marked.parse(idDescription)}
    />
  ) : null
}

{
  idExamples ? (
    <div>
      <h2>Examples</h2>
      <div set:html={idExamples} />
    </div>
  ) : null
}
{
  idMoreInfo ? (
    <div>
      <h2>More info</h2>
      <div set:html={idMoreInfo} />
    </div>
  ) : null
}
{
  idExceptions ? (
    <div>
      <h2>Exceptions</h2>
      <div set:html={idExceptions} />
    </div>
  ) : null
}
{
  idAlsoSee ? (
    <div>
      <h2>Also see</h2>
      <div set:html={idAlsoSee} />
    </div>
  ) : null
}
{
  idRationale ? (
    <div>
      <h2>Rationale</h2>
      <div set:html={idRationale} />
    </div>
  ) : null
}

<style lang="scss">
  @use "@styles/responsive.scss" as r;

  h1#number-title {
    display: grid;
    grid-template-columns: auto 1fr auto;
    grid-template-areas:
      "number emoji"
      "title  title";
    gap: 1ch;

    .number,
    .emoji {
      font-size: 4rem;
      line-height: 1;
      @include r.mobile {
        justify-self: end;
      }
    }
    .number {
      grid-area: number;
    }
    .title {
      grid-area: title;
    }
    .emoji {
      grid-area: emoji;
      padding-top: 5px;
    }
  }
</style>
