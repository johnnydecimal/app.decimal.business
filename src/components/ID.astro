---
/**
 * The ID view component. So we're at /11.11.
 */

// #region Props --------------------------------------------------------------
interface Props {
  id: string;
}
const { id } = Astro.props;
// #endregion

// #region Clerk user
const { userId } = Astro.locals.auth();
// #endregion

// #region Imports ------------------------------------------------------------
// Data
import system, {
  getChildren,
  type SystemEntry,
  type AreaEntry,
  type CategoryEntry,
  type IdEntry,
  type FurtherReadingEntry,
} from "src/data/smallBusinessFlat";
// Utils
import parseMd from "@utils/parseMd";
// Components
import Slice from "./common/Slice.astro";
import ObsidianVaultLink from "./common/ObsidianVaultLink.astro";
import FurtherReadingLinks from "./common/FurtherReadingLinks.astro";
// #endregion

// #region Entry: core details ------------------------------------------------
const idEntry = system[id] as IdEntry;
const isPublic = idEntry.isPublic || false;

// Get the small business details
const sb = idEntry.extensions.smallBusiness;
let idTitle: string;
let idDescription: string | undefined;
let idExamples: string | undefined;
let idOverview: string | undefined;
let idExceptions: string | undefined;
let idAlsoSee: string | undefined;

// If we have a signed-in user, show them the ID. If not, obfuscate it.
if (userId) {
  idTitle = idEntry.title;
  idDescription = await parseMd(system[id]?.description, true, true);
  idExamples = sb.examples && (await parseMd(sb.examples, true, true));
  idOverview = sb.overview && (await parseMd(sb.overview, true, true));
  idExceptions = sb.exceptions && (await parseMd(sb.exceptions, true, true));
  idAlsoSee = sb.alsoSee && (await parseMd(sb.alsoSee, true, true));
} else {
  idTitle = await parseMd(system[id]?.title, false, !!idEntry.isPublic);
  idDescription = await parseMd(
    system[id]?.description,
    true,
    !!idEntry.isPublic
  );
  idExamples =
    sb.examples && (await parseMd(sb.examples, true, !!idEntry.isPublic));
  idOverview =
    sb.overview && (await parseMd(sb.overview, true, !!idEntry.isPublic));
  idExceptions =
    sb.exceptions && (await parseMd(sb.exceptions, true, !!idEntry.isPublic));
  idAlsoSee =
    sb.alsoSee && (await parseMd(sb.alsoSee, true, !!idEntry.isPublic));
}

const parentCNumber = idEntry.number.split(".")[0];
const parentCEntry = system[parentCNumber] as CategoryEntry;
const parentCTitle = parentCEntry.title;

const firstDigit = parentCEntry.number.charAt(0);
const parentANumber = `${firstDigit}0-${firstDigit}9`;
const parentAEntry = system[parentANumber] as AreaEntry;
const parentATitle = parentAEntry.title;

const parentSNumber = "J82";
const parentSEntry = system[parentSNumber] as SystemEntry;
const parentSTitle = parentSEntry.title;
---

<Slice id="SystemBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <div></div>
    <h3 class="layout-right-item"><a href="/">{parentSTitle}</a></h3>
  </div>
</Slice>

<Slice id="AreaBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">
      <a href={parentANumber}>{parentANumber}</a>
    </h3>
    <h3 class="layout-right-item">
      <a href={parentANumber}>{parentATitle}</a>
    </h3>
  </div>
</Slice>

<Slice id="CategoryBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">
      <a href={parentCNumber}>{parentCNumber}</a>
    </h3>
    <h3 class="layout-right-item">
      <a href={parentCNumber}>{parentCTitle}</a>
    </h3>
  </div>
</Slice>

<Slice id="Header" className="active-top">
  <div class="layout-grid-left-right phone-only">
    <h1 class="layout-left-item">{id} {idTitle}</h1>
  </div>
  <div class="layout-grid-left-right tablet-portrait-up">
    <h1 class="layout-left-item">{id}</h1>
    <h1 class="layout-right-item">{idTitle}</h1>
  </div>
</Slice>

<!-- #region Optional fields -------------------------------------------------->
{
  idDescription ? (
    <Slice id="IDDescription" className="descriptive-text">
      <div class="layout-grid-left-right">
        <div />
        <div class="layout-right-item" set:html={idDescription} />
      </div>
    </Slice>
  ) : null
}

{
  idExamples ? (
    <Slice id="IDExamples" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Examples</h3>
        <div class="layout-right-item" set:html={idExamples} />
      </div>
    </Slice>
  ) : null
}

{
  idOverview ? (
    <Slice id="IDOverview" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Overview</h3>
        <div class="layout-right-item" set:html={idOverview} />
      </div>
    </Slice>
  ) : null
}

{
  idExceptions ? (
    <Slice id="IDExceptions" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Exceptions</h3>
        <div class="layout-right-item" set:html={idExceptions} />
      </div>
    </Slice>
  ) : null
}

{
  idAlsoSee ? (
    <Slice id="IDAlsoSee" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Also see</h3>
        <div class="layout-right-item" set:html={idAlsoSee} />
      </div>
    </Slice>
  ) : null
}

<FurtherReadingLinks number={id} />

<!-- #endregion -->

<ObsidianVaultLink id={id} idTitle={idTitle} />

<div id="EndOfIDsBorder"></div>

<style lang="scss">
  @use "@styles/common" as *;

  :global(#EndOfIDsBorder) {
    border-top: 1px solid var(--border-strong);
  }

  :global(#FurtherReadings),
  :global(#OpsManuals) {
    ul {
      list-style-type: none;
      padding-left: 0;
      @include tablet-portrait-up {
        margin-top: 0;
      }
    }
    li {
      margin-bottom: 0.5rem;
    }
  }
</style>
