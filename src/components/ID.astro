---
/**
 * The ID view component. So we're at /11.11.
 */

// #region Props --------------------------------------------------------------
interface Props {
  id: string;
}
const { id } = Astro.props;
// #endregion

// #region Clerk user
const { userId } = Astro.locals.auth();
// #endregion

// #region Imports ------------------------------------------------------------
// Data
import system, {
  getChildren,
  type SystemEntry,
  type AreaEntry,
  type CategoryEntry,
  type IdEntry,
  type FurtherReadingEntry,
} from "src/data/smallBusinessFlat";
// Utils
import obfuscate from "@utils/obfuscate";
import parseAndObfuscate from "@utils/parseAndObfuscate";
// Components
import Slice from "./common/Slice.astro";
import ObsidianVaultLink from "./common/ObsidianVaultLink.astro";
// #endregion

// #region Entry: core details ------------------------------------------------
const idEntry = system[id] as IdEntry;
const isPublic = idEntry.isPublic || false;

// Get the small business details
const sb = idEntry.extensions.smallBusiness;
let idTitle: string;
let idDescription: string | undefined;
let idExamples: string | undefined;
let idOverview: string | undefined;
let idExceptions: string | undefined;
let idAlsoSee: string | undefined;
let idRationale: string | undefined;

// If we have a signed-in user, show them the ID. If not, obfuscate it.
if (userId) {
  idTitle = idEntry.title;
  idDescription = await parseAndObfuscate(true, system[id]?.description);
  idExamples = await parseAndObfuscate(true, sb.examples);
  idOverview = await parseAndObfuscate(true, sb.overview);
  idExceptions = await parseAndObfuscate(true, sb.exceptions);
  idAlsoSee = await parseAndObfuscate(true, sb.alsoSee);
  idRationale = await parseAndObfuscate(true, sb.rationale);
} else {
  // Don't parseAndObfuscate the title, it returns HTML
  idTitle = obfuscate(isPublic, system[id]?.title);
  idDescription = await parseAndObfuscate(isPublic, system[id]?.description);
  idExamples = await parseAndObfuscate(isPublic, sb?.examples);
  idOverview = await parseAndObfuscate(isPublic, sb?.overview);
  idExceptions = await parseAndObfuscate(isPublic, sb?.exceptions);
  idAlsoSee = await parseAndObfuscate(isPublic, sb?.alsoSee);
  idRationale = await parseAndObfuscate(isPublic, sb?.rationale);
}

// Get all of the sub-IDs that this ID contains
const subIds = getChildren(system, id);

// let howTos, opsManuals;
let furtherReadings: { number: string; title: string }[] = [];

if (subIds) {
  // Generate furtherReadings
  const furtherReadingEntries = subIds.filter((child) =>
    child.number.match(/^\d\d\.\d\d\+[0-9]/)
  ) as FurtherReadingEntry[];
  furtherReadings = furtherReadingEntries.map((entry) => {
    if (!userId) {
      return {
        number: entry.number,
        title: obfuscate(isPublic, entry.title),
      };
    }
    return {
      number: entry.number,
      title: entry.title,
    };
  });
  // Generate howTos
  // Generate opsManuals
}

const parentCNumber = idEntry.number.split(".")[0];
const parentCEntry = system[parentCNumber] as CategoryEntry;
const parentCTitle = parentCEntry.title;

const firstDigit = parentCEntry.number.charAt(0);
const parentANumber = `${firstDigit}0-${firstDigit}9`;
const parentAEntry = system[parentANumber] as AreaEntry;
const parentATitle = parentAEntry.title;

const parentSNumber = "J82";
const parentSEntry = system[parentSNumber] as SystemEntry;
const parentSTitle = parentSEntry.title;
---

<Slice id="SystemBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <div></div>
    <h3 class="layout-right-item"><a href="/">{parentSTitle}</a></h3>
  </div>
</Slice>

<Slice id="AreaBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">
      <a href={parentANumber}>{parentANumber}</a>
    </h3>
    <h3 class="layout-right-item">
      <a href={parentANumber}>{parentATitle}</a>
    </h3>
  </div>
</Slice>

<Slice id="CategoryBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">
      <a href={parentCNumber}>{parentCNumber}</a>
    </h3>
    <h3 class="layout-right-item">
      <a href={parentCNumber}>{parentCTitle}</a>
    </h3>
  </div>
</Slice>

<Slice id="Header" className="active-top">
  <div class="layout-grid-left-right phone-only">
    <h1 class="layout-left-item">{id} {idTitle}</h1>
  </div>
  <div class="layout-grid-left-right tablet-portrait-up">
    <h1 class="layout-left-item">{id}</h1>
    <h1 class="layout-right-item">{idTitle}</h1>
  </div>
</Slice>

<!-- #region Optional fields -------------------------------------------------->
{
  idDescription ? (
    <Slice id="IDDescription" className="descriptive-text">
      <div class="layout-grid-left-right">
        <div />
        <div class="layout-right-item" set:html={idDescription} />
      </div>
    </Slice>
  ) : null
}

{
  idExamples ? (
    <Slice id="IDExamples" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Examples</h3>
        <div class="layout-right-item" set:html={idExamples} />
      </div>
    </Slice>
  ) : null
}

{
  idOverview ? (
    <Slice id="IDOverview" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Overview</h3>
        <div class="layout-right-item" set:html={idOverview} />
      </div>
    </Slice>
  ) : null
}

{
  idExceptions ? (
    <Slice id="IDExceptions" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Exceptions</h3>
        <div class="layout-right-item" set:html={idExceptions} />
      </div>
    </Slice>
  ) : null
}

{
  idAlsoSee ? (
    <Slice id="IDAlsoSee" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Also see</h3>
        <div class="layout-right-item" set:html={idAlsoSee} />
      </div>
    </Slice>
  ) : null
}

{
  idRationale ? (
    <Slice id="IDRationale" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Rationale</h3>
        <div class="layout-right-item" set:html={idRationale} />
      </div>
    </Slice>
  ) : null
}

{
  furtherReadings.length ? (
    <Slice id="FurtherReadings" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Further reading</h3>
        <div class="layout-right-item">
          <ul>
            {furtherReadings.map((furtherReading) => {
              return (
                <li>
                  <a href={`/${furtherReading.number}`}>
                    {furtherReading.number.replace(/^\d\d\.\d\d\+[0-9]/, "")}
                    {furtherReading.title}
                  </a>
                </li>
              );
            })}
          </ul>
        </div>
      </div>
    </Slice>
  ) : null
}

{
  /*
  opsManuals.length > 0 ? (
    <Slice id="OpsManuals" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Ops manuals</h3>
        <div class="layout-right-item">
          <ul>
            {opsManuals.map((opsManual) => {
              return (
                <li>
                  <a href={`/${opsManual.number}`}>
                    {opsManual.number.replace(/^\d\d\.\d\d\+OPS[0-9]+/, "")}
                    {opsManual.title}
                  </a>
                </li>
              );
            })}
          </ul>
        </div>
      </div>
    </Slice>
  ) : null
*/
}
<!-- #endregion -->

<ObsidianVaultLink id={id} idTitle={idTitle} />

<div id="EndOfIDsBorder"></div>

<style lang="scss">
  @use "@styles/common" as *;

  :global(#EndOfIDsBorder) {
    border-top: 1px solid var(--border-strong);
  }

  :global(#FurtherReadings),
  :global(#OpsManuals) {
    ul {
      list-style-type: none;
      padding-left: 0;
      @include tablet-portrait-up {
        margin-top: 0;
      }
    }
    li {
      margin-bottom: 0.5rem;
    }
  }
</style>
