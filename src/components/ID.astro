---
/**
 * The ID view component. So we're at /11.11.
 */

interface Props {
  id: string;
}
const { id } = Astro.props;

const { userId } = Astro.locals.auth();

// #region Imports ------------------------------------------------------------
// Data
import system, { type IdEntry } from "@data/smallBusinessFlat";
// Utils
import parseMd from "@utils/parseMd";
// Components
import SystemBreadcrumb from "@components/common/SystemBreadcrumb.astro";
import AreaBreadcrumb from "@components/common/AreaBreadcrumb.astro";
import CategoryBreadcrumb from "@components/common/CategoryBreadcrumb.astro";
import Slice from "@components/common/Slice.astro";
import ObsidianVaultLink from "@components/common/ObsidianVaultLink.astro";
import FurtherReadingLinks from "@components/common/FurtherReadingLinks.astro";
import FreeformSlice from "@components/common/FreeformSlice.astro";
import ForumDiscord from "@components/common/ForumDiscord.astro";
// #endregion

// #region Entry: core details ------------------------------------------------
const idEntry = system[id] as IdEntry;
const isPublic = idEntry.isPublic || false;
const isHeader = idEntry.isHeader || false;

// Get the small business details
const sb = idEntry.extensions.smallBusiness;
let idTitle: string;
let idDescription: string | undefined;
let idExamples: string | undefined;
let idOverview: string | undefined;
let idExceptions: string | undefined;
let idAlsoSee: string | undefined;

// If we have a signed-in user, show them the ID. If not, obfuscate it.
if (userId) {
  idTitle = idEntry.title;
  idDescription = await parseMd(idEntry.description);
  idExamples = sb.examples && (await parseMd(sb.examples));
  idOverview = sb.overview && (await parseMd(sb.overview));
  idExceptions = sb.exceptions && (await parseMd(sb.exceptions));
  idAlsoSee = sb.alsoSee && (await parseMd(sb.alsoSee));
} else {
  idTitle = await parseMd(idEntry.title, false, !!isPublic);
  idDescription = await parseMd(idEntry.description, true, !!isPublic);
  idExamples = sb.examples && (await parseMd(sb.examples, true, !!isPublic));
  idOverview = sb.overview && (await parseMd(sb.overview, true, !!isPublic));
  idExceptions =
    sb.exceptions && (await parseMd(sb.exceptions, true, !!isPublic));
  idAlsoSee = sb.alsoSee && (await parseMd(sb.alsoSee, true, !!isPublic));
}

// If this entry is a header, get its children
let childEntries;
if (isHeader) {
  childEntries = Object.values(system).filter(
    (entry) =>
      (entry.type === "id" || entry.type === "adHoc") &&
      entry.number.startsWith(idEntry.number.slice(0, 4)) &&
      entry.number !== idEntry.number
  ) as IdEntry[];
}
---

<SystemBreadcrumb />

<AreaBreadcrumb thisEntry={idEntry} />

<CategoryBreadcrumb thisEntry={idEntry} />

<Slice id="Header" className="active-top">
  <div class="layout-grid-left-right phone-only">
    <h1 class="layout-left-item">{id} {idTitle}</h1>
  </div>
  <div class="layout-grid-left-right tablet-portrait-up">
    <h1 class="layout-left-item">{id}</h1>
    <h1 class="layout-right-item">{idTitle}</h1>
  </div>
</Slice>

{
  idDescription ? (
    <Slice id="IDDescription" className="main-text">
      <div class="layout-grid-left-right">
        <div />
        <div class="layout-right-item" set:html={idDescription} />
      </div>
    </Slice>
  ) : null
}

{
  sb.freeform && (
    <FreeformSlice freeform={sb.freeform} isPublic={isPublic} userId={userId} />
  )
}

<!-- #region Optional fields -------------------------------------------------->
{
  idExamples ? (
    <Slice id="IDExamples" className="main-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Examples</h3>
        <div class="layout-right-item" set:html={idExamples} />
      </div>
    </Slice>
  ) : null
}

{
  idOverview ? (
    <Slice id="IDOverview" className="main-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">{!idEntry.noLabel ? "Overview" : ""}</h3>
        <div class="layout-right-item" set:html={idOverview} />
      </div>
    </Slice>
  ) : null
}

{
  idExceptions ? (
    <Slice id="IDExceptions" className="main-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Exceptions</h3>
        <div class="layout-right-item" set:html={idExceptions} />
      </div>
    </Slice>
  ) : null
}

{
  idAlsoSee ? (
    <Slice id="IDAlsoSee" className="main-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Also see</h3>
        <div class="layout-right-item" set:html={idAlsoSee} />
      </div>
    </Slice>
  ) : null
}

<FurtherReadingLinks number={id} />

<!-- #endregion -->

{
  childEntries && childEntries.length > 0 ? (
    <Slice id="ChildEntries" className="main-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">â– </h3>
        <div class="layout-right-item">
          <p>This ID is a header. It contains the following IDs.</p>
          <ol class="no-style">
            {childEntries.map((entry) => (
              <li>
                <a href={`/${entry.number}`}>
                  {entry.number} {entry.title}
                </a>
              </li>
            ))}
          </ol>
        </div>
      </div>
    </Slice>
  ) : null
}

<Slice id="EndOfContentBorder" className="main-text">
  <div class="layout-grid-left-right"></div>
</Slice>

<ForumDiscord entry={idEntry} />

<ObsidianVaultLink id={id} idTitle={idTitle} />

<div id="EndOfIDsBorder"></div>

<style lang="scss">
  @use "@styles/common" as *;

  :global(#EndOfIDsBorder) {
    border-top: 1px solid var(--border-strong);
  }
  :global(#EndOfContentBorder .layout-grid-left-right) {
    border-top: 1px solid light-dark(#ccc, #333);
  }

  :global(#FurtherReadings),
  :global(#OpsManuals) {
    ul {
      list-style-type: none;
      padding-left: 0;
      @include tablet-portrait-up {
        margin-top: 0;
      }
    }
    li {
      margin-bottom: 0.5rem;
    }
  }
</style>
