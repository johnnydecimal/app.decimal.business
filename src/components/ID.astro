---
import "/src/styles/common.scss";

interface Props {
  id: string;
}

/**
 * The ID view component. So we're at /11.11.
 *
 * Shows a single ID, with all of its detail. Shows breadcrumbs
 * to its category and area.
 *
 * So we need:
 * √ To be passed the number of the id to render. This is the slug.
 * √ The whole system to reference. Just import it directly.
 * √ The title of the ID for the main header.
 * √ All of its other details for the main content.
 *   √ Wiki-linking the descriptive text.
 * - Its parent category (number & title), and
 * - Its parent category's parent area (number & title).
 * - Linking the ID header to the ID URL.
 * - Denoting with styles and a ■ whether it's a header.
 *
 * New Dec '24
 * - To import and use the Slice component.
 */

// - To be passed the number of the id to render. This is the slug.
const { id } = Astro.props;

// - The whole system to reference. Just import it directly.
import sb, {
  type AreaEntry,
  type CategoryEntry,
  type IdEntry,
} from "src/data/smallBusinessFlat";

// - The title of the ID for the main header.
const idTitle = sb[id]?.title;

// - Where those descriptions have been rendered to HTML from Markdown.
import { marked } from "marked";
import { markedSmartypants } from "marked-smartypants";
marked.use(markedSmartypants());

// - All of its other details for the main content.
const idEntry = sb[id] as IdEntry;
const idEmoji = idEntry.emoji;

//   - Wiki-linking the descriptive text.
import wikiLinkify from "@helpers/wikiLinkify";

const idDescription = idEntry.description && wikiLinkify(idEntry.description);
const idEntrySb = idEntry.extensions?.smallBusiness;
const idExamples =
  idEntrySb?.examples && (await marked.parse(wikiLinkify(idEntrySb.examples)));
const idMoreInfo =
  idEntrySb?.moreInfo && (await marked.parse(wikiLinkify(idEntrySb.moreInfo)));
const idExceptions =
  idEntrySb?.exceptions &&
  (await marked.parse(wikiLinkify(idEntrySb.exceptions)));
const idAlsoSee =
  idEntrySb?.alsoSee && (await marked.parse(wikiLinkify(idEntrySb.alsoSee)));
const idRationale =
  idEntrySb?.rationale &&
  (await marked.parse(wikiLinkify(idEntrySb.rationale)));

// - Its parent category (number & title), and
// - Its parent category's parent area (number & title).
const parentCNumber = idEntry.parentNumber;
const parentCEntry = sb[parentCNumber] as CategoryEntry;
const parentCTitle = parentCEntry.title;

const parentANumber = parentCEntry.parentNumber;
const parentAEntry = sb[parentANumber] as AreaEntry;
const parentATitle = parentAEntry.title;

// - To import and use the Slice component.
import Slice from "./common/Slice.astro";

const flowchart = `
flowchart TD
    A(("[A] Start")) --> B("[B] An income, expense, or
    liability event")
    B --> C["[C] The invoice, receipt, or bill"]
    C --> D["[D] Save it for
    later processing"] & H["[H] Process the invoice,
    receipt, or bill"]
    C -.-> E["*(Bills only)*
    [E] Pay it immediately"]
    D --> F["[F] One of your inboxes"]
    F --o G["[G] ⏯️
    Every month/quarter,
    process your inboxes"]
    G --> H
    H --> I["[I] A specific JD ID for
    the thing you have processed"]
    E --> H
    I --> J((("[J] Stop")))

    C@{ shape: doc}
    D@{ shape: proc}
    F@{ shape: db}
    G@{ shape: delay}
    I@{ shape: db}
`;
---

<Slice>
  <nav>
    <ul>
      <li>
        <a href={`/${parentANumber}`}>
          <span>{parentANumber}</span>
          <span>{parentATitle}</span>
        </a>
      </li>
      <li>
        <a href={`/${parentCNumber}`} class="breadcrumb-category">
          <span>{parentCNumber}</span>
          <span>{parentCTitle}</span>
        </a>
      </li>
    </ul>
  </nav>
</Slice>

<Slice>
  <h1 id="number-title">
    <span class="number">{id}</span>
    <span class="title">{idTitle}</span>
    <span class="emoji">{idEmoji}</span>
  </h1>
</Slice>

<Slice>
  <div class="mermaid">
    {flowchart}
  </div>
</Slice>

{
  idDescription ? (
    <Slice>
      <div
        class="description"
        set:html={idDescription && marked.parse(idDescription)}
      />
    </Slice>
  ) : null
}

{
  idExamples ? (
    <Slice>
      <h2>Examples</h2>
      <div set:html={idExamples} />
    </Slice>
  ) : null
}

{
  idMoreInfo ? (
    <Slice>
      <h2>More info</h2>
      <div set:html={idMoreInfo} />
    </Slice>
  ) : null
}

{
  idExceptions ? (
    <Slice>
      <h2>Exceptions</h2>
      <div set:html={idExceptions} />
    </Slice>
  ) : null
}

{
  idAlsoSee ? (
    <Slice>
      <h2>Also see</h2>
      <div set:html={idAlsoSee} />
    </Slice>
  ) : null
}

{
  idRationale ? (
    <Slice>
      <h2>Rationale</h2>
      <div set:html={idRationale} />
    </Slice>
  ) : null
}

<style lang="scss">
  @use "@styles/common.scss" as *;

  h1 {
    font-size: 1rem;
  }
  h2 {
    font-size: 1rem;
  }

  // --------- old but might be useful ---------
  /* 
  h1#number-title {
    display: grid;
    grid-template-columns: auto 1fr auto;
    grid-template-areas:
      "number emoji"
      "title  title";
    gap: 1ch;

    .number,
    .emoji {
      font-size: 4rem;
      line-height: 1;
      @include mobile {
        justify-self: end;
      }
    }
    .number {
      grid-area: number;
    }
    .title {
      grid-area: title;
    }
    .emoji {
      grid-area: emoji;
      padding-top: 5px;
    }
  }
    */
</style>
