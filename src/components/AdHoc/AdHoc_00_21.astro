---
import { createClerkClient } from "@clerk/astro/server";

import Slice from "@components/common/Slice.astro";

const { userId } = Astro.locals.auth();
const clerkClient = createClerkClient({
  secretKey: import.meta.env.CLERK_SECRET_KEY,
});
const user = await clerkClient.users.getUser(userId!);
const firstRunComplete = user.publicMetadata.firstRunComplete || false;
const useEmoji = user.publicMetadata.useEmoji || false;
---

{
  !user ? (
    <Slice className="descriptive-text">
      <div class="layout-grid-left-right">
        <div />
        <div class="layout-right-item">
          <p>Loading your user data...</p>
        </div>
      </div>
    </Slice>
  ) : (
    <>
      <Slice className="descriptive-text">
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">Home page</h3>
          <div class="layout-right-item">
            <input
              type="checkbox"
              id="firstRunCompleteCheckbox"
              checked={firstRunComplete}
            />
            <span id="firstRunCompleteUpdateStatus" />
            <p>
              When you log in, do you want to see the{" "}
              <a href="/00.11">introductory help page</a>, or the
              <a href="/">system home page</a>? (Inactive)
            </p>
            <select name="homePage" id="homePage">
              <option value="home">Home page</option>
              <option value="help">Help page</option>
            </select>
          </div>
        </div>
      </Slice>

      <Slice className="descriptive-text">
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">Emoji</h3>
          <div class="layout-right-item">
            <p>
              Do you want to use emoji in your system? This applies to file
              system folder and JDex downloads.
            </p>
            <select name="useEmoji" id="useEmoji">
              <option value="false" selected={!useEmoji}>
                No
              </option>
              <option value="true" selected={useEmoji}>
                Yes ðŸ˜ƒ
              </option>
            </select>
            <span id="useEmojiSaved" class="hidden" />
          </div>
        </div>
      </Slice>
    </>
  )
}

<script>
  import { actions } from "astro:actions";
  document.addEventListener("DOMContentLoaded", () => {
    const useEmojiEl = document.getElementById("useEmoji") as HTMLSelectElement;
    if (!useEmojiEl) throw new Error("ðŸš¨ emojiPref doesn't exist!");

    useEmojiEl.addEventListener("change", async () => {
      const useEmoji = useEmojiEl.value === "true";
      const useEmojiSaved = document.getElementById("useEmojiSaved");
      if (!useEmojiSaved) throw new Error("ðŸš¨ useEmojiSaved doesn't exist!");

      const { data, error } = await actions.setUseEmoji({ useEmoji });
      if (!error && data.status === "success") {
        console.log("âœ… setUseEmoji.");
        updateStatus(useEmojiSaved, true);
      } else if (error) {
        updateStatus(useEmojiSaved, false);
        console.error("setUseEmoji failed:", error.message);
      }
    });
  });

  function updateStatus(statusEl: HTMLElement | null, success: boolean): void {
    if (!statusEl) return;
    statusEl.innerText = " â– ";
    statusEl.classList.add(success ? "green" : "red");
    statusEl.classList.remove("hidden");

    setTimeout(() => {
      statusEl.classList.add("hidden");
      setTimeout(() => {
        statusEl.innerText = "";
        statusEl.classList.remove("green", "red");
      }, 500);
    }, 2000);
  }
</script>

<style lang="scss">
  @use "@styles/common" as *;

  select {
    margin-bottom: 1rem;
  }

  #useEmojiSaved {
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
    &.hidden {
      opacity: 0;
    }
    &.green {
      color: light-dark(green, lightgreen);
    }
    &.red {
      color: light-dark(red, red);
    }
  }
</style>
