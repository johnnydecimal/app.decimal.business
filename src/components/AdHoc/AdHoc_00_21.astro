---
import { createClerkClient } from "@clerk/astro/server";

import Slice from "@components/common/Slice.astro";

const { userId } = Astro.locals.auth();
const clerkClient = createClerkClient({
  secretKey: import.meta.env.CLERK_SECRET_KEY,
});
const user = await clerkClient.users.getUser(userId!);
const firstRunComplete = user.publicMetadata.firstRunComplete || false;
const useEmoji = user.publicMetadata.useEmoji || false;
const jdexApp = user.publicMetadata.jdexApp || "none";
---

{
  !user ? (
    <Slice className="descriptive-text">
      <div class="layout-grid-left-right">
        <div />
        <div class="layout-right-item">
          <p>Loading your user data...</p>
        </div>
      </div>
    </Slice>
  ) : (
    <>
      {/* 
      <Slice id="SettingsFirstRun" className="descriptive-text">
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">Home page</h3>
          <div class="layout-right-item">
            <input
              type="checkbox"
              id="firstRunCompleteCheckbox"
              checked={firstRunComplete}
            />
            <span id="firstRunCompleteUpdateStatus" />
            <p>
              When you log in, do you want to see the{" "}
              <a href="/00.11">introductory help page</a>, or the
              <a href="/">system home page</a>? (Inactive)
            </p>
            <select name="homePage" id="homePage">
              <option value="home">Home page</option>
              <option value="help">Help page</option>
            </select>
          </div>
        </div>
      </Slice>
      */}

      <Slice id="SettingsEmoji" className="descriptive-text">
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">Emoji</h3>
          <div class="layout-right-item">
            <p>
              Do you want to use emoji in your system? This applies to file
              system folder and JDex downloads.
            </p>
            <select name="useEmoji" id="useEmoji">
              <option value="false" selected={!useEmoji}>
                No
              </option>
              <option value="true" selected={useEmoji}>
                Yes ðŸ˜ƒ
              </option>
            </select>
            <span id="useEmojiSaved" class="saved-indicator hidden" />
          </div>
        </div>
      </Slice>

      <Slice id="SettingsJDexApp" className="descriptive-text">
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">JDex app</h3>
          <div class="layout-right-item">
            <p>
              Which app do you use for your JDex? This setting allows us to
              create links from each of the IDs on this website.
            </p>
            <p>
              If the app you use isn't shown here, please send us feedback using
              the link below.
            </p>
            <select name="jdexApp" id="jdexApp">
              <option value="none" selected={jdexApp === "none"}>
                â€“ Select â€“
              </option>
              <option value="bear" selected={jdexApp === "bear"}>
                Bear
              </option>
              <option value="obsidian" selected={jdexApp === "obsidian"}>
                Obsidian
              </option>
            </select>
            <span id="jdexAppSaved" class="saved-indicator hidden" />
            <p>
              <a href="obsidian://open?vault=D85%20Johnny.Decimal&file=01.01%20System%20inbox">
                Obsidian
              </a>
            </p>
            <div id="ObsidianVault">ObV</div>
          </div>
        </div>
      </Slice>
    </>
  )
}

<script>
  import { actions } from "astro:actions";
  document.addEventListener("DOMContentLoaded", () => {
    /* ------------------------------ Emoji --------------------------------- */
    const useEmojiEl = document.getElementById("useEmoji") as HTMLSelectElement;
    if (!useEmojiEl) throw new Error("ðŸš¨ emojiPref doesn't exist!");

    useEmojiEl.addEventListener("change", async () => {
      const useEmoji = useEmojiEl.value === "true";
      const useEmojiSaved = document.getElementById("useEmojiSaved");
      if (!useEmojiSaved) throw new Error("ðŸš¨ useEmojiSaved doesn't exist!");

      const { data, error } = await actions.setUseEmoji({ useEmoji });
      if (!error && data.status === "success") {
        console.log("âœ… setUseEmoji.");
        updateStatus(useEmojiSaved, true);
      } else if (error) {
        updateStatus(useEmojiSaved, false);
        console.error("setUseEmoji failed:", error.message);
      }
    });

    /* ------------------------------ JDex app ------------------------------ */
    const jdexAppEl = document.getElementById("jdexApp") as HTMLSelectElement;
    if (!jdexAppEl) throw new Error("ðŸš¨ jdexApp doesn't exist!");
    jdexAppEl.addEventListener("change", async () => {
      const jdexApp = jdexAppEl.value;
      const jdexAppSaved = document.getElementById("jdexAppSaved");
      if (!jdexAppSaved) throw new Error("ðŸš¨ jdexAppSaved doesn't exist!");

      const { data, error } = await actions.setPublicMetadata({
        key: "jdexApp",
        value: jdexApp,
      });
      if (!error && data.status === "success") {
        console.log("âœ… setJdexApp.");
        updateStatus(jdexAppSaved, true);
      } else if (error) {
        updateStatus(jdexAppSaved, false);
        console.error("setJdexApp failed:", error.message);
      }
    });
  });
  // #endregion document.addEventListener

  function updateStatus(statusEl: HTMLElement | null, success: boolean): void {
    if (!statusEl) return;

    if (success) {
      statusEl.innerText = " â– ";
      statusEl.classList.add("green");
      statusEl.classList.remove("red", "hidden");

      setTimeout(() => {
        statusEl.classList.add("hidden");
        setTimeout(() => {
          statusEl.innerText = "";
          statusEl.classList.remove("green");
        }, 700);
      }, 2000);
    } else {
      statusEl.innerHTML = ` Error saving: please <a href="#" onclick="location.reload();">reload</a>`;
      statusEl.classList.add("red");
      statusEl.classList.remove("green", "hidden");
    }
  }
</script>

<style lang="scss">
  @use "@styles/common" as *;

  select {
    height: 1.6rem; // Affects FF, Chromium
    margin-bottom: 1rem;
  }

  .saved-indicator {
    opacity: 1;
    transition: opacity 0.7s ease-in-out;
    &.hidden {
      opacity: 0;
    }
    &.green {
      color: light-dark(green, lightgreen);
    }
    &.red {
      color: light-dark(red, red);
    }
  }

  #ObsidianVault {
    display: none;
  }
</style>
