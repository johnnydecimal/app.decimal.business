---
// 05.11 System downloads
import { createClerkClient } from "@clerk/astro/server";

import Slice from "@components/common/Slice.astro";

const { userId } = Astro.locals.auth();
const clerkClient = createClerkClient({
  secretKey: import.meta.env.CLERK_SECRET_KEY,
});
const user = userId && (await clerkClient.users.getUser(userId));

// const useEmoji = user.publicMetadata.useEmoji || false;

let useBlackSquare;
// Define the type for our custom publicMetadata
interface UserPublicMetadata {
  useBlackSquare?: boolean;
  useEmoji?: boolean;
}

if (user) {
  // If this is not set, we default it to true and push it back to Clerk
  const typedMetadata = user.publicMetadata as UserPublicMetadata;
  useBlackSquare = typedMetadata.useBlackSquare;
  if (useBlackSquare === undefined) {
    await clerkClient.users.updateUserMetadata(userId!, {
      publicMetadata: { useBlackSquare: true },
    });
    useBlackSquare = true;
  }
}
---

{
  !user ? (
    <Slice id="NotLoggedIn" className="main-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">❗</h3>
        <div class="layout-right-item text-error">
          <p>
            <strong>
              You are not logged in. These links are in demo mode: the files you
              download will be hidden in the same way as the rest of the site,
              with _____ replacing the content for non-public IDs.
            </strong>
          </p>
          <p>
            This section of the site is under active development and you should
            expect bugs.
          </p>
        </div>
      </div>
    </Slice>
  ) : null
}

<Slice className="main-text">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">Note</h3>
    <div class="layout-right-item">
      {/* prettier-ignore */}
      <p>
        Your <a href="/01.02" title="01.02 User settings">user settings</a> affect
        whether these downloads contain emoji and other special characters.
      </p>
      <p>
        You can change those settings and use the download links here as often
        as you like.
      </p>
    </div>
  </div>
</Slice>

<Slice className="main-text">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">Folder structure</h3>
    <div class="layout-right-item">
      <p>Download your Johnny.Decimal file system folder structure here.</p>
      <p>
        Move the folder from your Downloads folder to wherever you store your
        documents.
      </p>
      <button
        onclick="window.location.href = '/api/v1/download-folder-structure'"
      >
        Download
      </button>
    </div>
  </div>
</Slice>

<Slice id="JDex-download" className="main-text">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">JDex files</h3>
    <div class="layout-right-item">
      <p>Download your Johnny.Decimal JDex files here.</p>
      <p>
        Open this folder as an
        <a href="https://help.obsidian.md/manage-vaults">Obsidian vault</a>
      </p>
      <div class="select-group">
        <label for="obsidianNestedFolders"
          >Do you want a single, flat folder of Markdown files? Or do you want
          them nested in area/category folders?</label
        >
        <select name="obsidianNestedFolders" id="obsidianNestedFolders">
          <option value="false">☰ Flat folder</option>
          <option value="true">↘ Nested area/category folders</option>
        </select><br />
        <button onclick="downloadWithOptions()">Download</button>
      </div>

      <script is:inline>
        function downloadWithOptions() {
          // Get the value from the select element
          const selectElement = document.getElementById(
            "obsidianNestedFolders"
          );
          if (!selectElement) {
            console.error("Select element not found");
            return;
          }

          const nestedFolders = selectElement.value;

          // Build the URL with the parameter
          const downloadUrl = `/api/v1/download-jdex-files?nestedFolders=${nestedFolders}`;

          // Navigate to the URL to trigger the download
          window.location.href = downloadUrl;
        }
      </script>
    </div>
  </div>
  {
    !user ? (
      <div class="layout-grid-left-right">
        <div class="layout-left-item">❗</div>
        <div class="layout-right-item text-error">
          <p class="text-error">
            <strong>
              This demo version downloads a JDex folder suitable for Obsidian.
              As of 2025-03-02 it is under construction.
            </strong>
          </p>
        </div>
      </div>
    ) : null
  }
</Slice>

<style lang="scss">
  @use "@styles/common" as *;

  button {
    margin-bottom: 1rem; // mimics <p>
    padding: 5px;
  }

  select {
    height: 1.6rem; // Affects FF, Chromium
    margin-bottom: 1rem;
  }

  #useEmojiSaved {
    opacity: 1;
    transition: opacity 0.7s ease-in-out;
    &.hidden {
      opacity: 0;
    }
    &.green {
      color: light-dark(green, lightgreen);
    }
    &.red {
      color: light-dark(red, red);
    }
  }

  .select-group {
    margin-top: 1rem;
    select {
      margin: 1rem 0;
    }
  }
</style>
