---
import Slice from "@components/common/Slice.astro";
import { createClerkClient } from "@clerk/astro/server";

const { userId } = Astro.locals.auth();

const clerkClient = createClerkClient({
  secretKey: import.meta.env.CLERK_SECRET_KEY,
});

const user = userId && (await clerkClient.users.getUser(userId));

let _1_tos, _2_community, _3_settings, _4_folders, _5_jdex;
if (user) {
  _1_tos = user.publicMetadata?.onboarding?._1_tos;
  _2_community = user.publicMetadata?.onboarding?._2_community;
  _3_settings = user.publicMetadata?.onboarding?._3_settings;
  _4_folders = user.publicMetadata?.onboarding?._4_folders;
  _5_jdex = user.publicMetadata?.onboarding?._5_jdex;
}
---

{
  !user ? (
    <Slice className="main-text">
      <div class="layout-grid-left-right">
        <div />
        <div class="layout-right-item">
          <p>Loading your user data...</p>
          <p>
            (If you're not signed in, nothing else is going to happen. When you
            are signed in, this page guides you through the initial setup of
            your system.)
          </p>
        </div>
      </div>
    </Slice>
  ) : (
    <>
      <Slice id="GetStarted-TOS" className="main-text">
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">Terms of Service</h3>
          <div class="layout-right-item">
            {!_1_tos ? (
              <>
                <p>
                  Before you do anything else, you need to read and agree to the
                  Terms of Service.
                </p>
                <p>
                  They're very short, and written to be read by a human. It'll
                  take two minutes. <a href="/00.31">Go and read them now</a>,
                  then come back here and check this box.
                </p>
              </>
            ) : null}
            <p>
              <input
                type="checkbox"
                id="termsOfService"
                checked={_1_tos}
                disabled={_1_tos}
              />
              <span id="tosText" class={_1_tos ? "tos-agreed" : ""}>
                I agree to the Terms of Service
              </span>
            </p>
          </div>
        </div>
      </Slice>

      <Slice
        id="GetStarted-Community"
        className={`main-text ${_1_tos ? "" : "tos-not-agreed"}`}
      >
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">Community</h3>
          <div class="layout-right-item">
            {!_2_community ? (
              <>
                <p>
                  We've designed this system with the community at its heart.
                  You'll have a nicer time, and be better supported, if you join
                  one or both of the forum, and Discord.
                </p>
                <p>
                  The forum is simpler and slower. Whereas Discord is more of an
                  always-on chat channel. If you're unsure, start with the
                  forum.
                </p>
                <p>
                  At the bottom of every page there are links to these
                  communities. These links take you to a specific channel where
                  you can get targeted help.
                </p>
                <p>
                  There's also a private feedback form if you want to send us a
                  message directly. And you can always{" "}
                  <a href="mailto:hello@johnnydecimal.com">email me</a>.
                </p>
                <p>
                  Head over to <a href="/00.13">00.13 Forum & Discord links</a>,
                  sign yourself up, and send us a little welcome message.
                </p>
                <p>
                  Now the point of this is that{" "}
                  <em>you ask for help if you need it</em>! I can't emphasise
                  this enough: you didn't just buy a bunch of words on a
                  website. You bought our support.
                </p>
                <p>
                  So if you need something â€” <em>anything</em> â€” just ask.{" "}
                  <strong>There are no stupid questions.</strong>
                </p>
              </>
            ) : null}
            <p>
              <input
                type="checkbox"
                id="community"
                checked={_2_community}
                disabled={!_1_tos || _2_community}
              />
              <span
                id="communityText"
                class={_2_community ? "community-agreed" : ""}
              >
                I'm in! And I promise to ask for help if I need it
              </span>
            </p>
          </div>
        </div>
      </Slice>

      <Slice
        id="GetStarted-Settings"
        className={`main-text ${_1_tos ? "" : "tos-not-agreed"}`}
      >
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">Settings</h3>
          <div class="layout-right-item">
            {!_3_settings ? (
              <>
                <p>
                  The system works 'out of the box', but there are some settings
                  that change how it looks, and let us know which app you use
                  for your JDex.
                </p>
                <p>
                  When you download your folder structure & JDex files, you can
                  choose to have them with emoji ðŸ‘‹ or not, and to use the â– 
                  square symbol on headers.
                </p>
                <p>
                  Emoji is just a personal preference. We think they're really
                  useful â€” they help your brain anchor on to concepts and
                  remember where things are. We use them in our own system.
                </p>
                <p>
                  But as this is <em>business</em>, some of you might not want
                  that. Oh and they look rubbish on Windows. Thanks, Microsoft.
                  So they're <strong>off</strong> by default.
                </p>
                <p>
                  The â–  header squares are recommended, and are{" "}
                  <strong>on</strong> by default. But some cloud services,
                  notably Dropbox, won't synchronise folders with <em>any</em>{" "}
                  special characters. So you might need to turn them off.
                </p>
                <p>
                  There's also a setting where you tell us which app you're
                  using for your JDex. And if you use Obsidian, you enter your
                  vault name. This enables the link at the bottom of each page
                  that opens the entry in your JDex. It's to the right of the â†—
                  arrow.
                </p>
              </>
            ) : null}
            <p>
              <input
                type="checkbox"
                id="settings"
                checked={_3_settings}
                disabled={!_1_tos || _3_settings}
              />
              <span
                id="settingsText"
                class={_3_settings ? "settings-agreed" : ""}
              >
                I've configured my settings
              </span>
            </p>
          </div>
        </div>
      </Slice>

      <Slice
        id="GetStarted-Folders"
        className={`main-text ${_1_tos ? "" : "tos-not-agreed"}`}
      >
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">Folders</h3>
          <div class="layout-right-item">
            {!_4_folders ? (
              <>
                <p>
                  Time to download your folder structure. This is where you'll
                  actually save your files.
                </p>
                <p>
                  Head over to <a href="/01.03">01.03 System downloads</a>,
                  click the <strong>Download folders</strong> button, and follow
                  the instructions there to move it to the correct location.
                </p>
              </>
            ) : null}
            <p>
              <input
                type="checkbox"
                id="folders"
                checked={_4_folders}
                disabled={!_1_tos || _4_folders}
              />
              <span id="foldersText" class={_4_folders ? "folders-agreed" : ""}>
                I've downloaded and installed my folders
              </span>
            </p>
          </div>
        </div>
      </Slice>

      <Slice
        id="GetStarted-JDex"
        className={`main-text ${_1_tos ? "" : "tos-not-agreed"}`}
      >
        <div class="layout-grid-left-right">
          <h3 class="layout-left-item">JDex files</h3>
          <div class="layout-right-item">
            {!_5_jdex ? (
              <>
                <p>
                  And finally, get your JDex files. The Johnny.Decimal index â€”
                  JDex for short â€” is a superpower. Let us know if you need any
                  help with this one.
                </p>
                <p>
                  Go back to <a href="/01.03">01.03 System downloads</a>, click
                  the <strong>Download JDex files</strong> button, and follow
                  the instructions there to move them and open them up in
                  Obsidian.
                </p>
              </>
            ) : null}
            <p>
              <input
                type="checkbox"
                id="jdex"
                checked={_5_jdex}
                disabled={!_1_tos || _5_jdex}
              />
              <span id="jdexText" class={_5_jdex ? "jdex-agreed" : ""}>
                I've downloaded and installed my JDex files
              </span>
            </p>
          </div>
        </div>
      </Slice>
    </>
  )
}

<script>
  import { actions } from "astro:actions";

  document.addEventListener("DOMContentLoaded", async () => {
    // #region Get elements
    const termsOfServiceCheckbox = document.getElementById(
      "termsOfService"
    ) as HTMLInputElement;
    const tosText = document.getElementById("tosText");
    const communityCheckbox = document.getElementById(
      "community"
    ) as HTMLInputElement;
    const communityText = document.getElementById("communityText");
    const settingsCheckbox = document.getElementById(
      "settings"
    ) as HTMLInputElement;
    const settingsText = document.getElementById("settingsText");
    const foldersCheckbox = document.getElementById(
      "folders"
    ) as HTMLInputElement;
    const foldersText = document.getElementById("foldersText");
    const jdexCheckbox = document.getElementById("jdex") as HTMLInputElement;
    const jdexText = document.getElementById("jdexText");
    const onboardingBanner = document.getElementById("OnboardingBanner");
    // #endregion

    // #region TOS
    if (!termsOfServiceCheckbox)
      throw new Error("ðŸš¨ termsOfServiceCheckbox doesn't exist!");
    if (!tosText) throw new Error("ðŸš¨ tosText element doesn't exist!");

    termsOfServiceCheckbox.addEventListener("change", async () => {
      if (termsOfServiceCheckbox.checked) {
        // Apply strikethrough and disable checkbox
        tosText.classList.add("tos-agreed");
        termsOfServiceCheckbox.disabled = true;

        // Update metadata
        // FIXME handle errors throughout this file
        const { data, error } = await actions.setPublicMetadata({
          key: "onboarding._1_tos",
          value: new Date().toISOString(),
        });

        // Remove tos-not-agreed class
        document
          .getElementById("GetStarted-Community")
          ?.classList.remove("tos-not-agreed");
        document
          .getElementById("GetStarted-Settings")
          ?.classList.remove("tos-not-agreed");
        document
          .getElementById("GetStarted-Folders")
          ?.classList.remove("tos-not-agreed");
        document
          .getElementById("GetStarted-JDex")
          ?.classList.remove("tos-not-agreed");
        // Enable checkboxes
        communityCheckbox.disabled = false;
        settingsCheckbox.disabled = false;
        foldersCheckbox.disabled = false;
        jdexCheckbox.disabled = false;
      }
    });
    // #endregion

    // #region Community
    if (!communityCheckbox)
      throw new Error("ðŸš¨ communityCheckbox doesn't exist!");
    if (!communityText)
      throw new Error("ðŸš¨ communityText element doesn't exist!");

    communityCheckbox.addEventListener("change", async () => {
      if (communityCheckbox.checked) {
        communityText.classList.add("community-agreed");
        communityCheckbox.disabled = true;

        // Update metadata
        const { data, error } = await actions.setPublicMetadata({
          key: "onboarding._2_community",
          value: new Date().toISOString(),
        });
      }
    });
    // #endregion

    // #region Settings
    if (!settingsCheckbox)
      throw new Error("ðŸš¨ settingsCheckbox doesn't exist!");
    if (!settingsText)
      throw new Error("ðŸš¨ settingsText element doesn't exist!");

    settingsCheckbox.addEventListener("change", async () => {
      if (settingsCheckbox.checked) {
        settingsText.classList.add("settings-agreed");
        settingsCheckbox.disabled = true;

        // Update metadata
        const { data, error } = await actions.setPublicMetadata({
          key: "onboarding._3_settings",
          value: new Date().toISOString(),
        });
      }
    });
    // #endregion

    // #region Folders
    if (!foldersCheckbox) throw new Error("ðŸš¨ foldersCheckbox doesn't exist!");
    if (!foldersText) throw new Error("ðŸš¨ foldersText element doesn't exist!");

    foldersCheckbox.addEventListener("change", async () => {
      if (foldersCheckbox.checked) {
        foldersText.classList.add("folders-agreed");
        foldersCheckbox.disabled = true;

        // Update metadata
        const { data, error } = await actions.setPublicMetadata({
          key: "onboarding._4_folders",
          value: new Date().toISOString(),
        });
      }
    });
    // #endregion

    // #region JDex
    if (!jdexCheckbox) throw new Error("ðŸš¨ jdexCheckbox doesn't exist!");
    if (!jdexText) throw new Error("ðŸš¨ jdexText element doesn't exist!");

    jdexCheckbox.addEventListener("change", async () => {
      if (jdexCheckbox.checked) {
        jdexText.classList.add("jdex-agreed");
        jdexCheckbox.disabled = true;

        // Update metadata
        const { data, error } = await actions.setPublicMetadata({
          key: "onboarding._5_jdex",
          value: new Date().toISOString(),
        });
        const { data: dataComplete, error: errorComplete } =
          await actions.setPublicMetadata({
            key: "onboarding.complete",
            value: true,
          });
        if (onboardingBanner) onboardingBanner.style.display = "none";
      }
    });
    // #endregion
  });
</script>

<style lang="scss">
  @use "@styles/common" as *;

  .tos-agreed {
    text-decoration: line-through;
  }

  .community-agreed {
    text-decoration: line-through;
  }

  .settings-agreed {
    text-decoration: line-through;
  }

  .folders-agreed {
    text-decoration: line-through;
  }

  .jdex-agreed {
    text-decoration: line-through;
  }

  :global(.tos-not-agreed) {
    // Only apply opacity to text elements
    h3,
    p,
    span,
    a,
    label {
      opacity: 0.3;
    }
  }
</style>
