---
import Slice from "./Slice.astro";
---

<Slice>
  <div class="search-container">
    <input type="text" id="search" placeholder="Search..." />
    <button id="clear-search" aria-label="Clear search" style="display: none;"
      >&times;</button
    >
  </div>
  <ul id="results" style="display: none;"></ul>
</Slice>

<style lang="scss">
  @use "@styles/common.scss" as *;

  .search-container {
    position: relative;
    width: 100%;
  }

  input#search {
    border-color: transparent;
    border-radius: 0px;
    font-family: "Berkeley Mono", ui-monospace, "Cascadia Code",
      "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
    outline: none;
    padding: 10px;
    width: 100%;
    -webkit-appearance: none; /* Remove rounded corners on iOS */
  }

  input#search:focus {
    border-color: transparent;
    outline: 2px solid hotpink; /* Use outline for focus indication */
  }

  button#clear-search {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: hotpink;
  }

  ul#results {
    font-family: "Berkeley Mono", ui-monospace, "Cascadia Code",
      "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
    position: absolute;
    background: white;
    max-height: 250px;
    overflow-y: auto;
    width: calc(
      var(--content-max-width) - var(--content-padding) - var(--content-padding)
    );
    z-index: 1000;
    border-left: 2px solid hotpink;
    border-right: 2px solid hotpink;
    border-bottom: 2px solid hotpink;

    :global(li) {
      padding: 5px 10px;
      border-bottom: 1px dotted hotpink;

      :global(a) {
        color: inherit;
        text-decoration: none;
      }
    }
  }

  #results li:last-child {
    border-bottom: none;
  }
</style>

<script>
  import Fuse from "fuse.js";

  interface SearchResult {
    number: string;
    title: string;
    description: string;
  }

  async function initializeSearch() {
    const res = await fetch("/searchIndex.json");
    const data: SearchResult[] = await res.json();

    // Initialize Fuse.js
    const fuse = new Fuse(data, {
      keys: [
        "number",
        "title",
        "description",
        "smallBusiness.examples",
        "smallBusiness.moreInfo",
        "smallBusiness.exceptions",
        "smallBusiness.alsoSee",
        "smallBusiness.rationale",
        "smallBusiness.links",
      ], // Fields to search
      ignoreLocation: true, // Don't include index location data
      includeScore: true, // Include search relevance scores
      threshold: 0.4, // Adjust for more/less fuzzy matching
    });

    const searchInput = document.getElementById("search") as HTMLInputElement;
    const clearButton = document.getElementById(
      "clear-search"
    ) as HTMLButtonElement;

    if (searchInput) {
      searchInput.addEventListener("input", (e) => {
        const query = (e.target as HTMLInputElement).value;
        const results = query
          ? fuse.search(query).map((result) => result.item)
          : [];
        displayResults(results);

        // Toggle clear button visibility
        clearButton.style.display = query ? "block" : "none";
      });

      searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          searchInput.value = "";
          searchInput.blur();
          displayResults([]);
          clearButton.style.display = "none";
        }
      });
    }

    if (clearButton) {
      clearButton.addEventListener("click", () => {
        if (searchInput) {
          searchInput.value = "";
          searchInput.blur();
          displayResults([]);
          clearButton.style.display = "none";
        }
      });
    }
  }

  function displayResults(results: SearchResult[]) {
    const resultsList = document.getElementById("results") as HTMLUListElement;
    if (resultsList) {
      if (results.length > 0) {
        resultsList.style.display = "block";
      } else {
        resultsList.style.display = "none";
      }
      resultsList.innerHTML = results
        .map(
          (item) => `
            <li>
              <a href="/${item.number}">
                <strong>${item.number} ${item.title}</strong>
                <p>${item.description}</p>
              </a>
            </li>`
        )
        .join("");
    }
  }

  // Initialize search on page load
  initializeSearch().catch((err) =>
    console.error("Error initializing search:", err)
  );
</script>
