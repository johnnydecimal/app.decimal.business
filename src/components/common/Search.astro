<input type="text" id="search" placeholder="Search..." />
<ul id="results" style="display: none;"></ul>

<style lang="scss">
  input#search {
    border-color: transparent;
    border-radius: 0px;
    font-family: "Berkeley Mono", ui-monospace, "Cascadia Code",
      "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
    outline: none;
    padding: 10px;
    width: 100%;
    -webkit-appearance: none; /* Remove rounded corners on iOS */
  }

  input#search:focus {
    border-color: transparent;
    outline: 2px solid hotpink; /* Use outline for focus indication */
  }

  ul#results {
    font-family: "Berkeley Mono", ui-monospace, "Cascadia Code",
      "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
    position: absolute;
    background: white;
    max-height: 250px;
    overflow-y: auto;
    width: calc(
      var(--content-max-width) - var(--content-padding) - var(--content-padding)
    );
    z-index: 1000;
    border-left: 2px solid hotpink;
    border-right: 2px solid hotpink;
    border-bottom: 2px solid hotpink;

    :global(li) {
      padding: 5px 10px;
      border-bottom: 1px dotted hotpink;

      :global(a) {
        color: inherit;
        text-decoration: none;
      }
    }
  }

  #results li:last-child {
    border-bottom: none;
  }
</style>

<script>
  import Fuse from "fuse.js";
  async function initializeSearch() {
    const res = await fetch("/searchIndex.json");
    const data = await res.json();

    // Initialize Fuse.js
    const fuse = new Fuse(data, {
      keys: [
        "number",
        "title",
        "description",
        "smallBusiness.examples",
        "smallBusiness.moreInfo",
        "smallBusiness.exceptions",
        "smallBusiness.alsoSee",
        "smallBusiness.rationale",
        "smallBusiness.links",
      ], // Fields to search
      ignoreLocation: true, // Don't include index location data
      includeScore: true, // Include search relevance scores
      threshold: 0.4, // Adjust for more/less fuzzy matching
    });

    const searchInput = document.getElementById("search");
    if (searchInput) {
      searchInput.addEventListener("input", (e) => {
        if (e.target) {
          const query = (e.target as HTMLInputElement).value;
          const results = query
            ? fuse.search(query).map((result) => result.item)
            : [];
          displayResults(results);
        }
      });

      searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          (searchInput as HTMLInputElement).value = "";
          searchInput.blur();
          displayResults([]);
        }
      });
    }
  }

  // @ts-ignore TODO
  function displayResults(results) {
    const resultsList = document.getElementById("results");
    if (resultsList) {
      if (results.length > 0) {
        resultsList.style.display = "block";
      } else {
        resultsList.style.display = "none";
      }
      resultsList.innerHTML = results
        .map(
          // @ts-ignore TODO
          (item) => `
            <li>
              <a href="/${item.number}">
                <strong>${item.number} ${item.title}</strong>
                <p>${item.description}</p>
              </a>
            </li>`
        )
        .join("");
    }
  }

  // Initialize search on page load
  initializeSearch().catch((err) =>
    console.error("Error initializing search:", err)
  );
</script>
