---
import Slice from "./Slice.astro";
---

<Slice id="Search" className="secondary-content-bg search-border">
  <div id="search-container">
    <input type="text" id="search" placeholder="Search..." />
    <button id="clear-search" aria-label="Clear search" style="display: none;"
      >&times;</button
    >
    <ul id="results" style="display: none;"></ul>
  </div>
  <div id="dimmed-overlay" style="display: none;"></div>
</Slice>

<style lang="scss">
  @use "@styles/common" as *;

  #search-container {
    position: relative;
    z-index: 1001; // Ensure search container is above the overlay
  }

  #dimmed-overlay {
    background: rgba(0, 0, 0, 0.2);
    height: 100%;
    left: 0;
    pointer-events: none;
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000;
    backdrop-filter: blur(5px); // Add blur effect
  }

  input#search {
    background-color: var(--secondary-content-bg);
    border-color: transparent;
    border-radius: 0px;
    box-sizing: border-box; // otherwise padding adds to overall
    font-family: "Berkeley Mono", ui-monospace, "Cascadia Code",
      "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
    outline: none;
    padding: 10px;
    width: 100%;
    -webkit-appearance: none; /* Remove rounded corners on iOS */
  }

  input#search:focus {
    // border-color: transparent;
    // outline: 2px solid var(--border-accent);
    // border-left: 2px solid var(--border-accent);
    // border-right: 2px solid var(--border-accent);
    box-shadow:
      -2px 0 var(--border-accent),
      2px 0 var(--border-accent);
  }

  button#clear-search {
    background: none;
    border: none;
    color: var(--border-accent);
    cursor: pointer;
    font-size: 1.5rem;
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
  }

  ul#results {
    background: light-dark(white, black);
    // border-left: 2px solid var(--border-accent);
    // border-right: 2px solid var(--border-accent);
    border-bottom: 2px solid var(--border-accent);
    box-shadow:
      -2px 0 var(--border-accent),
      2px 0 var(--border-accent);
    box-sizing: border-box;
    font-family: "Berkeley Mono", ui-monospace, "Cascadia Code",
      "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
    list-style-type: none;
    margin: 0;
    max-height: 250px;
    max-width: 100%;
    overflow-y: auto;
    padding: 0;
    position: absolute;
    width: calc(
      var(--content-max-width) - var(--content-padding) - var(--content-padding)
    );
    z-index: 1000;

    :global(li) {
      border-bottom: 1px dotted var(--border-accent);
      padding: 5px 10px;

      :global(a) {
        color: inherit;
        text-decoration: none;
      }

      :global(p) {
        margin: 5px 0 0 0;
      }
    }
  }

  #results li:last-child {
    border-bottom: none;
  }
</style>

<script>
  import Fuse from "fuse.js";

  interface SearchResult {
    number: string;
    title: string;
    description: string;
  }

  async function initializeSearch() {
    const res = await fetch("/searchIndex.json");
    const data: SearchResult[] = await res.json();

    // Initialize Fuse.js
    const fuse = new Fuse(data, {
      keys: [
        "number",
        "title",
        "description",
        "smallBusiness.examples",
        "smallBusiness.moreInfo",
        "smallBusiness.exceptions",
        "smallBusiness.alsoSee",
        "smallBusiness.rationale",
        "smallBusiness.links",
      ], // Fields to search
      ignoreLocation: true, // Don't include index location data
      includeScore: true, // Include search relevance scores
      threshold: 0.4, // Adjust for more/less fuzzy matching
    });

    const searchInput = document.getElementById("search") as HTMLInputElement;
    const clearButton = document.getElementById(
      "clear-search"
    ) as HTMLButtonElement;
    const dimmedOverlay = document.getElementById("dimmed-overlay");
    const searchContainer = document.getElementById("search-container");

    if (searchInput) {
      searchInput.addEventListener("input", (e) => {
        const query = (e.target as HTMLInputElement).value;
        const results = query
          ? fuse.search(query).map((result) => result.item)
          : [];
        displayResults(results);

        // Toggle clear button visibility
        clearButton.style.display = query ? "block" : "none";
        // Toggle dimmed overlay visibility
        if (dimmedOverlay) {
          dimmedOverlay.style.display = results.length > 0 ? "block" : "none";
        }
      });

      searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          searchInput.value = "";
          searchInput.blur();
          displayResults([]);
          clearButton.style.display = "none";
          if (dimmedOverlay) {
            dimmedOverlay.style.display = "none";
          }
        }
      });

      searchInput.addEventListener("blur", () => {
        setTimeout(() => {
          searchInput.value = "";
          displayResults([]);
          clearButton.style.display = "none";
          if (dimmedOverlay) {
            dimmedOverlay.style.display = "none";
          }
        }, 100); // Add a small delay before dismissing
      });
    }

    if (clearButton) {
      clearButton.addEventListener("click", () => {
        if (searchInput) {
          searchInput.value = "";
          searchInput.blur();
          displayResults([]);
          clearButton.style.display = "none";
          if (dimmedOverlay) {
            dimmedOverlay.style.display = "none";
          }
        }
      });
    }

    document.addEventListener("click", (e) => {
      if (
        searchContainer &&
        !searchContainer.contains(e.target as Node) &&
        searchInput.value
      ) {
        setTimeout(() => {
          searchInput.value = "";
          displayResults([]);
          clearButton.style.display = "none";
          if (dimmedOverlay) {
            dimmedOverlay.style.display = "none";
          }
        }, 100); // Add a small delay before dismissing
      }
    });
  }

  function displayResults(results: SearchResult[]) {
    const resultsList = document.getElementById("results") as HTMLUListElement;
    if (resultsList) {
      if (results.length > 0) {
        resultsList.style.display = "block";
      } else {
        resultsList.style.display = "none";
      }
      resultsList.innerHTML = results
        .map(
          (item) => `
            <li>
              <a href="/${item.number}">
                <strong>${item.number} ${item.title}</strong>
                <p>${item.description}</p>
              </a>
            </li>`
        )
        .join("");
    }
  }

  // Initialize search on page load
  initializeSearch().catch((err) =>
    console.error("Error initializing search:", err)
  );
</script>
