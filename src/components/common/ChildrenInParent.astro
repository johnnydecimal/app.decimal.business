---
/**
 * ChildrenInParent shows the [Areas | Categories | IDs] in this
 * [System | Area | Category] list.
 *
 * This is _not_ used for any of the lists of sub-IDs like further reading.
 */

interface Props {
  number: string;
}
const { number } = Astro.props;

import Slice from "@components/common/Slice.astro";
import sb, {
  getChildren,
  type AreaEntry,
  type CategoryEntry,
  type IdEntry,
} from "@data/smallBusinessFlat";
import parseMd from "@utils/parseMd";

const { userId } = Astro.locals.auth();

// Figure out if the parent is a system, area, or category
let parentType: "system" | "area" | "category";
if (number.match("J82")) {
  parentType = "system";
} else if (number.match(/^\d\d-\d\d$/)) {
  parentType = "area";
} else if (number.match(/^\d\d$/)) {
  parentType = "category";
} else if (number.match(/^\d\d\.\d\d$/)) {
  // This isn't what this component is for
  throw new Error(`ChildrenInParent: IDs are not allowed to have children`);
} else {
  throw new Error(`ChildrenInParent: Unknown parent type for ${number}`);
}

const subEntries = getChildren(sb, number) as (
  | AreaEntry
  | CategoryEntry
  | IdEntry
)[];
if (!subEntries) {
  return null;
}

const processedIds = await Promise.all(
  subEntries.map(async (entry) => {
    // We only want 'pure' entries here, not +FR or +OPS etc.
    if (parentType === "system" && !entry.number.match(/^\d\d-\d\d$/)) {
      return null;
    }
    if (parentType === "area" && !entry.number.match(/^\d\d$/)) {
      return null;
    }
    if (parentType === "category" && !entry.number.match(/^\d\d\.\d\d$/)) {
      return null;
    }

    // Obfuscate IDs, if there's no signed-in user. Never obfuscate areas or
    // categories.
    let entryTitle, entryDescription;
    if (userId || entry.type === "area" || entry.type === "category") {
      entryTitle = entry.title;
      entryDescription = await parseMd(entry.description);
    } else {
      entryTitle = await parseMd(entry.title, false, !!entry.isPublic);
      entryDescription = await parseMd(
        entry.description,
        true,
        !!entry.isPublic
      );
    }
    return {
      ...entry,
      title: entryTitle,
      description: entryDescription,
    };
  })
).then((results) => results.filter((id): id is IdEntry => id !== null));
---

<Slice id="ChildrenInParentLabel" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <div></div>
    {
      parentType === "system" && (
        <h2 class="layout-right-item">Areas in this system</h2>
      )
    }
    {
      parentType === "area" && (
        <h2 class="layout-right-item">Categories in this area</h2>
      )
    }
    {
      parentType === "category" && (
        <h2 class="layout-right-item">IDs in this category</h2>
      )
    }
  </div>
</Slice>

<Slice id="ChildrenInParentList" className="secondary-content-bg">
  <ol class="acid-list">
    {
      processedIds.map((id) => {
        return (
          <li
            class={`layout-grid-left-right ${id.isHeader ? "header-item" : ""}`}
          >
            <h3 class="layout-left-item">
              <a href={`/${id.number}`}>{id.number}</a>
            </h3>
            <div class="layout-right-item">
              <h3>
                <a class="blackSquare" href={`/${id.number}`}>
                  {id.isHeader ? "â–  " : ""}
                </a>
                <a href={`/${id.number}`}>{id.title}</a>
              </h3>
              <div set:html={id.description} />
            </div>
          </li>
        );
      })
    }
  </ol>
</Slice>

<style lang="scss">
  @use "@styles/common" as *;
</style>
