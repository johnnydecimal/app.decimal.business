---
/**
 * The area list view component. So we've navigated to
 * /jdex/10-19.
 *
 * Shows the area and all of its categories. Might it be nice to show
 * the header-IDs as well?
 *
 * ```
 * ðŸ•š 10-19 The teens                                        [emoji, big?]
 *      The description of area ten through nineteen.
 *
 * ## 11 The business & its people
 *       Description
 *       11.10 Documents
 *       11.20 Registraions
 *
 * ## 12 Where we trade...
 *          Description
 * ## 13 ...
 *
 * ```
 *
 * So we need:
 * - To be passed the number of the area to render. This is the slug.
 * - The whole system to reference. Just import it directly.
 * - The title of the area for the main header.
 * - The description and emoji of the area.
 * - An array of the categories that this area contains. Each one of those
 *   needs to contain the ID, title, description, emoji.
 * - Where those descriptions have been rendered to HTML from Markdown.
 * - Linking the category header to the category URL.
 * - A breadcrumb to the parent area.
 */

// - To be passed the number of the category to render. This is the slug.
interface Props {
  area: string;
}
const { area } = Astro.props;

// - The whole system to reference. Just import it directly.
import sb from "src/data/smallBusinessFlat";

// - The title of the area for the main header.
const areaEntry = sb[area] as AreaEntry;
const areaTitle = areaEntry.title;

// - The description and emoji of the area.
// const areaEmoji = areaEntry.emoji;

// - All of its other details for the main content.
const areaDescription = await marked.parse(wikiLinkify(areaEntry.description));
const areaEntrySb = areaEntry.extensions?.smallBusiness;
const areaExamples =
  areaEntrySb?.examples &&
  (await marked.parse(wikiLinkify(areaEntrySb.examples)));
const areaMoreInfo =
  areaEntrySb?.moreInfo &&
  (await marked.parse(wikiLinkify(areaEntrySb.moreInfo)));
const areaExceptions =
  areaEntrySb?.exceptions &&
  (await marked.parse(wikiLinkify(areaEntrySb.exceptions)));
const areaAlsoSee =
  areaEntrySb?.alsoSee &&
  (await marked.parse(wikiLinkify(areaEntrySb.alsoSee)));
const areaRationale =
  areaEntrySb?.rationale &&
  (await marked.parse(wikiLinkify(areaEntrySb.rationale)));

// - An array of the categories that this area contains. Each one of those
//   needs to contain the ID, title, description, isHeader, emoji.
import { getChildren } from "src/data/smallBusinessFlat";
import type {
  SystemEntry,
  AreaEntry,
  CategoryEntry,
} from "src/data/smallBusinessFlat";
const categories = getChildren(sb, area) as CategoryEntry[];

// - Where those descriptions have been rendered to HTML from Markdown.
import { marked } from "marked";
import { markedSmartypants } from "marked-smartypants";
marked.use(markedSmartypants());

// - Wiki-linkify the description
import wikiLinkify from "@helpers/wikiLinkify";

// - To import and use the Slice component.
import Slice from "./common/Slice.astro";

// - A breadcrumb to the parent system.
const parentSNumber = areaEntry.parentNumber;
const parentSEntry = sb[parentSNumber] as SystemEntry;
const parentSTitle = parentSEntry.title;
---

<Slice className="secondary-content-bg system-slice">
  <div class="label-text-container">
    <h2 class="label"><a href="/">{parentSNumber}</a></h2>
    <div class="text">{parentSTitle}</div>
  </div>
</Slice>

<Slice className="active-top">
  <div class="label-text-container">
    <h2 class="label active-item">{area}</h2>
    <h2 class="text active-item">{areaTitle}</h2>
  </div>
</Slice>

{
  areaDescription ? (
    <Slice className="active-middle">
      <div class="label-text-container">
        <div />
        <div class="text" set:html={areaDescription} />
      </div>
    </Slice>
  ) : null
}

{
  areaExamples ? (
    <Slice className="active-middle">
      <div class="label-text-container">
        <h2 class="label">Examples</h2>
        <div class="text" set:html={areaExamples} />
      </div>
    </Slice>
  ) : null
}

{
  areaMoreInfo ? (
    <Slice className="active-middle">
      <div class="label-text-container">
        <h2 class="label">More info</h2>
        <div class="text" set:html={areaMoreInfo} />
      </div>
    </Slice>
  ) : null
}

{
  areaExceptions ? (
    <Slice className="active-middle">
      <div class="label-text-container">
        <h2 class="label">Exceptions</h2>
        <div class="text" set:html={areaExceptions} />
      </div>
    </Slice>
  ) : null
}

{
  areaAlsoSee ? (
    <Slice className="active-middle">
      <div class="label-text-container">
        <h2 class="label">Also see</h2>
        <div class="text" set:html={areaAlsoSee} />
      </div>
    </Slice>
  ) : null
}

{
  areaRationale ? (
    <Slice className="active-middle">
      <div class="label-text-container">
        <h2 class="label">Rationale</h2>
        <div class="text" set:html={areaRationale} />
      </div>
    </Slice>
  ) : null
}

<Slice className="active-bottom" />

<Slice className="secondary-content-bg">
  <div class="label-text-container">
    <div></div>
    <h3 class="text">Categories in this area</h3>
  </div>
</Slice>

<Slice className="secondary-content-bg">
  <ol class="acid-list">
    {
      categories.map(async (category) => {
        const categoryDescription = await marked.parse(
          wikiLinkify(category.description)
        );
        return (
          <li class="label-text-container">
            <h2 class="label">
              <a href={`/${category.number}`}>{category.number}</a>
            </h2>
            <div>
              <div class="text">
                <a href={`/${category.number}`}>{category.title}</a>
              </div>
              <div class="text" set:html={categoryDescription} />
            </div>
          </li>
        );
      })
    }
  </ol>
</Slice>

<style lang="scss">
  @use "@styles/common.scss" as *;
</style>
