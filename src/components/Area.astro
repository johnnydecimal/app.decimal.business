---
/**
 * The area list view component. So we've navigated to
 * /jdex/10-19.
 *
 * Shows the area and all of its categories. Might it be nice to show
 * the header-IDs as well?
 *
 * ```
 * ðŸ•š 10-19 The teens                                        [emoji, big?]
 *      The description of area ten through nineteen.
 *
 * ## 11 The business & its people
 *       Description
 *       11.10 Documents
 *       11.20 Registrations
 *
 * ## 12 Where we trade...
 *          Description
 * ## 13 ...
 *
 * ```
 *
 * So we need:
 * - To be passed the number of the area to render. This is the slug.
 * - The whole system to reference. Just import it directly.
 * - The title of the area for the main header.
 * - The description and emoji of the area.
 * - An array of the categories that this area contains. Each one of those
 *   needs to contain the ID, title, description, emoji.
 * - Where those descriptions have been rendered to HTML from Markdown.
 * - Linking the category header to the category URL.
 * - A breadcrumb to the parent area.
 */

// - To be passed the number of the category to render. This is the slug.
interface Props {
  area: string;
  testRun?: boolean;
}
const { area } = Astro.props;

// - The whole system to reference. Just import it directly.
import system from "src/data/smallBusinessFlat";

// - The title of the area for the main header.
const areaEntry = system[area] as AreaEntry;
const areaTitle = areaEntry.title;

// - The description and emoji of the area.
// const areaEmoji = areaEntry.emoji;

// - All of its other details for the main content.
import { parseMdWikiLink } from "@utils/parseMdWikiLink";
const areaDescription = await parseMdWikiLink(areaEntry.description);
const areaEntrySb = areaEntry.extensions?.smallBusiness;
const areaExamples = await parseMdWikiLink(areaEntrySb?.examples);
const areaMoreInfo = await parseMdWikiLink(areaEntrySb?.moreInfo);
const areaExceptions = await parseMdWikiLink(areaEntrySb?.exceptions);
const areaAlsoSee = await parseMdWikiLink(areaEntrySb?.alsoSee);
const areaRationale = await parseMdWikiLink(areaEntrySb?.rationale);

// - An array of the categories that this area contains. Each one of those
//   needs to contain the ID, title, description, isHeader, emoji.
import { getChildren } from "src/data/smallBusinessFlat";
import type {
  SystemEntry,
  AreaEntry,
  CategoryEntry,
} from "src/data/smallBusinessFlat";
const categories = getChildren(system, area) as CategoryEntry[];

// - To import and use the Slice component.
import Slice from "./common/Slice.astro";

// - A breadcrumb to the parent system.
const parentSNumber = areaEntry.parentNumber;
const parentSEntry = system[parentSNumber] as SystemEntry;
const parentSTitle = parentSEntry.title;
---

<Slice id="SystemBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <div></div>
    <h3 class="layout-right-item"><a href="/">{parentSTitle}</a></h3>
  </div>
</Slice>

<Slice id="Header" className="active-top">
  <div class="layout-grid-left-right phone-only">
    <h1 class="layout-left-item">{area} {areaTitle}</h1>
  </div>
  <div class="layout-grid-left-right tablet-portrait-up">
    <h1 class="layout-left-item">{area}</h1>
    <h1 class="layout-right-item">{areaTitle}</h1>
  </div>
</Slice>

{
  areaDescription ? (
    <Slice id="AreaDescription" className="descriptive-text">
      <div class="layout-grid-left-right">
        <div />
        <div class="layout-right-item" set:html={areaDescription} />
      </div>
    </Slice>
  ) : null
}

{
  areaExamples ? (
    <Slice id="AreaExamples" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Examples</h3>
        <div class="layout-right-item" set:html={areaExamples} />
      </div>
    </Slice>
  ) : null
}

{
  areaMoreInfo ? (
    <Slice id="AreaMoreInfo" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">More info</h3>
        <div class="layout-right-item" set:html={areaMoreInfo} />
      </div>
    </Slice>
  ) : null
}

{
  areaExceptions ? (
    <Slice id="AreaExceptions" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Exceptions</h3>
        <div class="layout-right-item" set:html={areaExceptions} />
      </div>
    </Slice>
  ) : null
}

{
  areaAlsoSee ? (
    <Slice id="AreaAlsoSee" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Also see</h3>
        <div class="layout-right-item" set:html={areaAlsoSee} />
      </div>
    </Slice>
  ) : null
}

{
  areaRationale ? (
    <Slice id="AreaRationale" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Rationale</h3>
        <div class="layout-right-item" set:html={areaRationale} />
      </div>
    </Slice>
  ) : null
}

<Slice id="ChildrenInParentLabel" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <div></div>
    <h2 class="layout-right-item">Categories in this area</h2>
  </div>
</Slice>

<Slice id="ChildrenInParentList" className="secondary-content-bg">
  <ol class="acid-list">
    {
      categories.map(async (category) => {
        const categoryDescription = await parseMdWikiLink(category.description);
        return (
          <li class="layout-grid-left-right">
            <h3 class="layout-left-item">
              <a href={`/${category.number}`}>{category.number}</a>
            </h3>
            <div class="layout-right-item">
              <h3>
                <a href={`/${category.number}`}>{category.title}</a>
              </h3>
              <div set:html={categoryDescription} />
            </div>
          </li>
        );
      })
    }
  </ol>
</Slice>

<style lang="scss">
  @use "@styles/common" as *;

  // Global, as <Slice> is a component, and the content above is <slot>
  :global(#AreaDescription) {
    // same as SystemDescription
    // On mobile, override the grid
    @include phone-only {
      .layout-grid-left-right {
        display: block;
      }
      .layout-right-item {
        border: none;
        padding-left: 0;
      }
    }
  }
</style>
