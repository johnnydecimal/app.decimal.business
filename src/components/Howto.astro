---
interface Props {
  id: string;
  testRun?: boolean;
}

/**
 * The ID view component. So we're at /11.11.
 *
 * Shows a single ID, with all of its detail. Shows breadbreadcrumbs
 * to its category and area.
 *
 * So we need:
 * √ To be passed the number of the id to render. This is the slug.
 * √ The whole system to reference. Just import it directly.
 * √ The title of the ID for the main header.
 * √ All of its other details for the main content.
 *   √ Wiki-linking the descriptive text.
 * - Its parent category (number & title), and
 * - Its parent category's parent area (number & title).
 * - Linking the ID header to the ID URL.
 * - Denoting with styles and a ■ whether it's a header.
 *
 * New Dec '24
 * - To import and use the Slice component.
 */

// - To be passed the number of the id to render. This is the slug.
const { id, testRun } = Astro.props;

// - The whole system to reference. Just import it directly.
import sb from "src/data/smallBusinessFlat";
import sbTest from "src/data/smallBusinessFlatTest";
let system;
console.log("env:", process.env.NODE_ENV);
if (testRun) {
  system = sbTest;
} else {
  system = sb;
}
import {
  type SystemEntry,
  type AreaEntry,
  type CategoryEntry,
  type IdEntry,
} from "src/data/smallBusinessFlat";

// - The title of the ID for the main header.
const idTitle = system[id]?.title;

// - Where those descriptions have been rendered to HTML from Markdown.
import { marked } from "marked";
import { markedSmartypants } from "marked-smartypants";
marked.use(markedSmartypants());

// - All of its other details for the main content.
const idEntry = system[id] as IdEntry;
// const idEmoji = idEntry.emoji;

//   - Wiki-linking the descriptive text.
import wikiLinkify from "@helpers/wikiLinkify";

const idDescription = await marked.parse(wikiLinkify(idEntry.description));
const idEntrySb = idEntry.extensions?.smallBusiness;
const idExamples =
  idEntrySb?.examples && (await marked.parse(wikiLinkify(idEntrySb.examples)));
const idMoreInfo =
  idEntrySb?.moreInfo && (await marked.parse(wikiLinkify(idEntrySb.moreInfo)));
const idExceptions =
  idEntrySb?.exceptions &&
  (await marked.parse(wikiLinkify(idEntrySb.exceptions)));
const idAlsoSee =
  idEntrySb?.alsoSee && (await marked.parse(wikiLinkify(idEntrySb.alsoSee)));
const idRationale =
  idEntrySb?.rationale &&
  (await marked.parse(wikiLinkify(idEntrySb.rationale)));

// - Its parent category (number & title), and
// - Its parent category's parent area (number & title).
const parentCNumber = idEntry.parentNumber;
const parentCEntry = system[parentCNumber] as CategoryEntry;
const parentCTitle = parentCEntry.title;

const parentANumber = parentCEntry.parentNumber;
const parentAEntry = system[parentANumber] as AreaEntry;
const parentATitle = parentAEntry.title;

// - A breadbreadcrumb to the parent system
const parentSNumber = parentAEntry.parentNumber;
const parentSEntry = system[parentSNumber] as SystemEntry;
const parentSTitle = parentSEntry.title;

// - To import and use the Slice component.
import Slice from "./common/Slice.astro";
---

<Slice id="SystemBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <div></div>
    <h3 class="layout-right-item"><a href="/">{parentSTitle}</a></h3>
  </div>
</Slice>

<Slice id="AreaBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">
      <a href={parentANumber}>{parentANumber}</a>
    </h3>
    <h3 class="layout-right-item">
      <a href={parentANumber}>{parentATitle}</a>
    </h3>
  </div>
</Slice>

<Slice id="CategoryBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">
      <a href={parentCNumber}>{parentCNumber}</a>
    </h3>
    <h3 class="layout-right-item">
      <a href={parentCNumber}>{parentCTitle}</a>
    </h3>
  </div>
</Slice>

<Slice id="Header" className="active-top">
  <div class="layout-grid-left-right phone-only">
    <h1 class="layout-left-item">{id} {idTitle}</h1>
  </div>
  <div class="layout-grid-left-right tablet-portrait-up">
    <h1 class="layout-left-item">{id}</h1>
    <h1 class="layout-right-item">{idTitle}</h1>
  </div>
</Slice>

{
  idDescription ? (
    <Slice id="IDDescription" className="descriptive-text">
      <div class="layout-grid-left-right">
        <div />
        <div class="layout-right-item" set:html={idDescription} />
      </div>
    </Slice>
  ) : null
}

{
  idExamples ? (
    <Slice id="IDExamples" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Examples</h3>
        <div class="layout-right-item" set:html={idExamples} />
      </div>
    </Slice>
  ) : null
}

{
  idMoreInfo ? (
    <Slice id="IDMoreInfo" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">More info</h3>
        <div class="layout-right-item" set:html={idMoreInfo} />
      </div>
    </Slice>
  ) : null
}

{
  idExceptions ? (
    <Slice id="IDExceptions" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Exceptions</h3>
        <div class="layout-right-item" set:html={idExceptions} />
      </div>
    </Slice>
  ) : null
}

{
  idAlsoSee ? (
    <Slice id="IDAlsoSee" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Also see</h3>
        <div class="layout-right-item" set:html={idAlsoSee} />
      </div>
    </Slice>
  ) : null
}

{
  idRationale ? (
    <Slice id="IDRationale" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Rationale</h3>
        <div class="layout-right-item" set:html={idRationale} />
      </div>
    </Slice>
  ) : null
}

<!-- TODO: add Ops manuals in this ID :-) -->

<div id="EndOfIDsBorder"></div>

<style lang="scss">
  // @use "@styles/common" as *;

  #EndOfIDsBorder {
    border-top: 1px solid var(--border-strong);
  }
</style>
