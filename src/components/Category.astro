---
/**
 * The category list view component. So we've navigated to /11.
 */

interface Props {
  category: string;
  testRun?: boolean;
}
const { category } = Astro.props;

// #region Clerk user
const { userId } = Astro.locals.auth();
// #endregion

import system, {
  getChildren,
  type SystemEntry,
  type AreaEntry,
  type CategoryEntry,
  type IdEntry,
} from "@data/smallBusinessFlat";
import parseMd from "@utils/parseMd";
import Slice from "./common/Slice.astro";

// Get this entry's details
const categoryEntry = system[category] as CategoryEntry;
const categoryTitle = categoryEntry.title;

// All of its other details for the main content.
const categoryDescription = await parseMd(categoryEntry.description);
const sb = categoryEntry.extensions?.smallBusiness;
const categoryExamples = sb?.examples && (await parseMd(sb.examples));
const categoryOverview = sb?.overview && (await parseMd(sb.overview));
const categoryExceptions = sb?.exceptions && (await parseMd(sb.exceptions));
const categoryAlsoSee = sb?.alsoSee && (await parseMd(sb.alsoSee));
const categoryRationale = sb?.rationale && (await parseMd(sb.rationale));

// Get all of the IDs that this category contains
const ids = getChildren(system, category) as IdEntry[];
// Process those IDs and their descriptions
const processedIds = await Promise.all(
  ids.map(async (id) => {
    // If id isn't a pure JD ID, e.g. it might be +OPS: ignore
    if (!id.number.match(/^\d\d\.\d\d$/)) {
      return null; // Return null to filter out later
    }

    let idTitle, idDescription;
    if (userId) {
      idTitle = id.title;
      idDescription = await parseMd(id.description);
    } else {
      idTitle = await parseMd(id.title, false, !!id.isPublic);
      idDescription = await parseMd(id.description, true, !!id.isPublic);
    }

    return {
      ...id,
      title: idTitle,
      description: idDescription,
    };
  })
).then((results) => results.filter((id): id is IdEntry => id !== null));

// For category entries, compute the parent area number from the category's first digit.
const firstDigit = categoryEntry.number.charAt(0);
const parentANumber = `${firstDigit}0-${firstDigit}9`;
const parentAEntry = system[parentANumber] as AreaEntry;
const parentATitle = parentAEntry.title;

// The system parent's number is always "J82".
const parentSNumber = "J82";
const parentSEntry = system[parentSNumber] as SystemEntry;
const parentSTitle = parentSEntry.title;
---

<Slice id="SystemBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <div></div>
    <h3 class="layout-right-item"><a href="/">{parentSTitle}</a></h3>
  </div>
</Slice>

<Slice id="AreaBreadcrumb" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <h3 class="layout-left-item">
      <a href={parentANumber}>{parentANumber}</a>
    </h3>
    <h3 class="layout-right-item">
      <a href={parentANumber}>{parentATitle}</a>
    </h3>
  </div>
</Slice>

<Slice id="Header" className="active-top">
  <div class="layout-grid-left-right phone-only">
    <h1 class="layout-left-item">{category} {categoryTitle}</h1>
  </div>
  <div class="layout-grid-left-right tablet-portrait-up">
    <h1 class="layout-left-item">{category}</h1>
    <h1 class="layout-right-item">{categoryTitle}</h1>
  </div>
</Slice>

{
  categoryDescription ? (
    <Slice id="CategoryDescription" className="descriptive-text">
      <div class="layout-grid-left-right">
        <div />
        <div class="layout-right-item" set:html={categoryDescription} />
      </div>
    </Slice>
  ) : null
}

{
  categoryExamples ? (
    <Slice id="CategoryExamples" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Examples</h3>
        <div class="layout-right-item" set:html={categoryExamples} />
      </div>
    </Slice>
  ) : null
}

{
  categoryOverview ? (
    <Slice id="CategoryOverview" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Overview</h3>
        <div class="layout-right-item" set:html={categoryOverview} />
      </div>
    </Slice>
  ) : null
}

{
  categoryExceptions ? (
    <Slice id="CategoryExceptions" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Exceptions</h3>
        <div class="layout-right-item" set:html={categoryExceptions} />
      </div>
    </Slice>
  ) : null
}

{
  categoryAlsoSee ? (
    <Slice id="CategoryAlsoSee" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Also see</h3>
        <div class="layout-right-item" set:html={categoryAlsoSee} />
      </div>
    </Slice>
  ) : null
}

{
  categoryRationale ? (
    <Slice id="CategoryRationale" className="descriptive-text">
      <div class="layout-grid-left-right">
        <h3 class="layout-left-item">Rationale</h3>
        <div class="layout-right-item" set:html={categoryRationale} />
      </div>
    </Slice>
  ) : null
}

<Slice id="ChildrenInParentLabel" className="secondary-content-bg">
  <div class="layout-grid-left-right">
    <div></div>
    <h2 class="layout-right-item">IDs in this category</h2>
  </div>
</Slice>

<Slice id="ChildrenInParentList" className="secondary-content-bg">
  <ol class="acid-list">
    {
      processedIds.map((id) => {
        return (
          <li
            class={`layout-grid-left-right ${id.isHeader ? "header-item" : ""}`}
          >
            <h3 class="layout-left-item">
              <a href={`/${id.number}`}>{id.number}</a>
            </h3>
            <div class="layout-right-item">
              <h3>
                <a class="blackSquare" href={`/${id.number}`}>
                  {id.isHeader ? "â–  " : ""}
                </a>
                <a href={`/${id.number}`}>{id.title}</a>
              </h3>
              <div set:html={id.description} />
            </div>
          </li>
        );
      })
    }
  </ol>
</Slice>

<style lang="scss">
  @use "@styles/common" as *;
</style>
