---
/**
 * The category list view component. So we've navigated to
 * /jdex/11.
 *
 * Shows the category and all of its IDs, grouped by header.
 *
 * ```
 * üïö 11 Eleven                                          [emoji, big?]
 *      The description of category eleven.
 *
 * ## 11.10 Official documents üóÇ Ô∏è
 *          Description
 *    11.11 Structure & registrations
 *          Description
 *    11.12 ...
 *
 * ## 11.20 Planning, contingencies, & insurance üß≠
 *          Description
 *    11.21 ...
 * ```
 *
 * So we need:
 * ‚àö To be passed the number of the category to render. This is the slug.
 * ‚àö The whole system to reference. Just import it directly.
 * ‚àö The title of the category for the main header.
 * ‚àö The description and emoji of the category.
 * ‚àö All of its other details for the main content.
 * ‚àö An array of the IDs that this category contains. Each one of those
 *   needs to contain the ID, title, description, isHeader, emoji.
 * ‚àö Where those descriptions have been rendered to HTML from Markdown.
 * ‚àö Linking the ID header to the ID URL.
 * ‚àö Denoting with styles and a ‚ñ† whether it's a header.
 * - A breadcrumb to the parent area.
 */

// - To be passed the number of the category to render. This is the slug.
interface Props {
  category: string;
}
const { category } = Astro.props;

// - The whole system to reference. Just import it directly.
import sb from "src/data/smallBusinessFlat";

// - The title of the category for the main header.
const categoryEntry = sb[category] as CategoryEntry;
const cTitle = categoryEntry.title;

// - The description and emoji of the category.
const cDescription = categoryEntry.description;
const cEmoji = categoryEntry.emoji;

// - All of its other details for the main content.
const categoryDescription = await marked.parse(
  wikiLinkify(categoryEntry.description)
);
const categoryEntrySb = categoryEntry.extensions?.smallBusiness;
const categoryExamples =
  categoryEntrySb?.examples &&
  (await marked.parse(wikiLinkify(categoryEntrySb.examples)));
const categoryMoreInfo =
  categoryEntrySb?.moreInfo &&
  (await marked.parse(wikiLinkify(categoryEntrySb.moreInfo)));
const categoryExceptions =
  categoryEntrySb?.exceptions &&
  (await marked.parse(wikiLinkify(categoryEntrySb.exceptions)));
const categoryAlsoSee =
  categoryEntrySb?.alsoSee &&
  (await marked.parse(wikiLinkify(categoryEntrySb.alsoSee)));
const categoryRationale =
  categoryEntrySb?.rationale &&
  (await marked.parse(wikiLinkify(categoryEntrySb.rationale)));

// - An array of the IDs that this category contains. Each one of those
//   needs to contain the ID, title, description, isHeader, emoji.
import { getChildren } from "src/data/smallBusinessFlat";
import type {
  AreaEntry,
  CategoryEntry,
  IdEntry,
} from "src/data/smallBusinessFlat";
const ids = getChildren(sb, "11") as IdEntry[];
console.log("=====");
console.log(ids);

// - Where those descriptions have been rendered to HTML from Markdown.
import { marked } from "marked";
import { markedSmartypants } from "marked-smartypants";
marked.use(markedSmartypants());

// - Wiki-linkify the description
import wikiLinkify from "@helpers/wikiLinkify";

// - A breadcrumb to the parent area.
const parentANumber = categoryEntry.parentNumber;
const parentAEntry = sb[parentANumber] as AreaEntry;
const parentATitle = parentAEntry.title;

// - To import and use the Slice component.
import Slice from "./common/Slice.astro";
---

<Slice>
  <div class="label-text-container">
    <h2 class="number"><a href={parentANumber}>{parentANumber}</a></h2>
    <div class="title">{parentATitle}</div>
  </div>
</Slice>

<Slice>
  <div class="label-text-container">
    <div class="number"><strong>{category}</strong></div>
    <div class="title"><strong>{cTitle}</strong></div>
  </div>
</Slice>

{
  categoryDescription ? (
    <Slice>
      <div class="label-text-container">
        <div />
        <div class="title" set:html={categoryDescription} />
      </div>
    </Slice>
  ) : null
}

<Slice>
  <ul id="id-list">
    {
      ids.map((id) => (
        <li class={id.isHeader ? "is-header" : null}>
          <h2>
            {/* - Linking the ID header to the ID URL. */}
            <a href={`/${id.number}`}>
              {id.number} {id.isHeader ? "‚ñ†" : ""} {id.title}
            </a>
          </h2>
          <div>
            <p
              class="description"
              set:html={
                id.description && marked.parse(wikiLinkify(id.description))
              }
            />
          </div>
        </li>
      ))
    }
  </ul>
</Slice>

<style lang="scss">
  @use "@styles/common.scss" as *;

  h1 {
    font-size: 1rem;
  }
  h2 {
    font-size: 1rem;
    line-height: 1.4; // line up with the adjacent <p>
  }

  .label-text-container {
    // Mobile-first
    .title {
      margin-bottom: 1ch;
    }

    @include tablet-portrait-up {
      display: grid;
      grid-template-columns: 10ch auto;

      .label,
      .number {
        padding: 1ch 1ch 0 0;
        justify-self: end;
      }
      .text,
      .title {
        border-left: 1.5px solid lightgrey;
        line-height: 1.4; // align baselines
        margin-bottom: unset;
        padding: 1ch 0 0 1ch;
      }
    }
  }

  ul#id-list {
    list-style-type: none;
    li.is-header {
      margin-top: var(--large);
    }

    li {
      margin: var(--tiny) 0;
    }
  }

  /*
  h1#number-title {
    display: grid;
    grid-template-columns: auto 1fr auto;
    grid-template-areas: "number title emoji";
    gap: 1ch;
    @include mobile {
      grid-template-areas:
        "number emoji"
        "title  title";
    }

    .number,
    .emoji {
      font-size: 4rem;
      line-height: 1;
      @include mobile {
        justify-self: end;
      }
    }
    .number {
      grid-area: number;
    }
    .title {
      grid-area: title;
    }
    .emoji {
      grid-area: emoji;
      padding-top: 5px;
    }
  }

  h2 {
    font-size: 1rem;
    font-weight: 600;
    a {
      text-decoration: none;
    }
  }

  */
</style>
